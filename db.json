{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/tou.png","path":"images/tou.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"2281b912ca48f90463f2ba351b67e8084edd9c65","modified":1690365006318},{"_id":"source/_posts/.DS_Store","hash":"1e32967b280a56458c5be1e248e578b073555629","modified":1693463661111},{"_id":"source/_posts/FactoryBean一探究竟-md.md","hash":"fa461dcf601bfdc4bc10075fcda68e71874515c7","modified":1688114537841},{"_id":"source/_posts/Taro学习.md","hash":"3abbeea4a0f8895016eb578a8c3b692877fe1c52","modified":1690961324773},{"_id":"source/_posts/BeanFactoryPostProcessor后置处理器分析.md","hash":"ba882607eaf0d18753f6ba71bb2797c69a240184","modified":1688114627838},{"_id":"source/_posts/mysql知识.md","hash":"8ab1852fa72bbe6d10f3e552aac9ed939665551d","modified":1688349145135},{"_id":"source/_posts/springboot的自动装配.md","hash":"c25d410c24450bcf1059a57dabbf1df800a06b43","modified":1688348978759},{"_id":"source/_posts/循环依赖.md","hash":"60d9e5234d02c417ec7632c60c2b7f2053524c86","modified":1688109550812},{"_id":"source/_posts/池化技术导致cpu占用飙高问题分析.md","hash":"607e02149ff08b851f68480f5bc354475bccc2f2","modified":1693470112859},{"_id":"source/_posts/遍历redis删除生产key.md","hash":"33a05e65bfabcf309d08b8d352497f37c61f76aa","modified":1688352315300},{"_id":"source/_posts/FactoryBean一探究竟-md/4.png","hash":"d0fb262d01ff1eba00498c32aa486a77a4b0774f","modified":1678072344056},{"_id":"source/_posts/池化技术导致cpu占用飙高问题分析/线程统计2.jpg","hash":"016f8cdc2dd83ed1034534ac32caf5ff68490b1d","modified":1693469395533},{"_id":"source/_posts/池化技术导致cpu占用飙高问题分析/.DS_Store","hash":"5b056ac620726586a32227851f2b40bc12a570ae","modified":1693463845120},{"_id":"source/_posts/FactoryBean一探究竟-md/3.png","hash":"377a4fd1ed85b76b2edf36f723540707ba0d9d6e","modified":1678072155361},{"_id":"source/_posts/池化技术导致cpu占用飙高问题分析/线程占用情况.png","hash":"e8ac7e6da39bfbd127824869aa897f882a0834f1","modified":1692172285634},{"_id":"source/_posts/FactoryBean一探究竟-md/1677828665083.jpg","hash":"79e9cdf0a7476a964ed2d4eff222e008d97cf2a0","modified":1677833469815},{"_id":"source/_posts/FactoryBean一探究竟-md/1677834219275.jpg","hash":"854d00c053317bb63ee1bd7fd28c7ba63a80655d","modified":1677834223824},{"_id":"source/_posts/FactoryBean一探究竟-md/1.jpg","hash":"e99ef8162018e7f64b2c3d0f6e547fe18cbfb17e","modified":1677835122211},{"_id":"source/_posts/池化技术导致cpu占用飙高问题分析/线程分析1.jpg","hash":"6dfdc28799ece46cd2b929d414bec6ca7553b05b","modified":1693469934922},{"_id":"source/_posts/FactoryBean一探究竟-md/2.jpg","hash":"ca55c0cc65b5ef43fa3d8ace0fc392ceed3cb29e","modified":1677835780949},{"_id":"source/_posts/池化技术导致cpu占用飙高问题分析/线程分析2.jpg","hash":"870507bd1c51aaab6cf675bf413ccc7011a26f94","modified":1693469966702},{"_id":"source/_posts/池化技术导致cpu占用飙高问题分析/线程统计.jpg","hash":"b796c91c2de71f78b9bf39b0f4dcdb5a2c3a54b6","modified":1693468845336},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1627608806000},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1627608806000},{"_id":"themes/next/.DS_Store","hash":"a84754a9461e5b5d95f94a41fefd6b92cfbdc47e","modified":1689142886401},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1627608806000},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1627608806000},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1627608806000},{"_id":"themes/next/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1627608806000},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1627608806000},{"_id":"themes/next/_config.yml","hash":"4e09755d46caee89ebf509ff4a38646d6cffbdec","modified":1688116148272},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1627608806000},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1627608806000},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1627608806000},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1627608806000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1627608806000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1627608806000},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1627608806000},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1627608806000},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1627608806000},{"_id":"themes/next/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1627608806000},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1627608806000},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1627608806000},{"_id":"themes/next/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1627608806000},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1627608806000},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1627608806000},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1627608806000},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1627608806000},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1627608806000},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1627608806000},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1627608806000},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1627608806000},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1627608806000},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1627608806000},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1627608806000},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1627608806000},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1627608806000},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1627608806000},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1627608806000},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1627608806000},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1627608806000},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1627608806000},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1627608806000},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1627608806000},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1627608806000},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1627608806000},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1627608806000},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1627608806000},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1627608806000},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1627608806000},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1627608806000},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1627608806000},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1627608806000},{"_id":"themes/next/languages/tr.yml","hash":"2b041eeb8bd096f549464f191cfc1ea0181daca4","modified":1627608806000},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1627608806000},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1627608806000},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1627608806000},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1627608806000},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1627608806000},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1627608806000},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1627608806000},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1627608806000},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1627608806000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1627608806000},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1627608806000},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1627608806000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1627608806000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1627608806000},{"_id":"themes/next/source/.DS_Store","hash":"04b463125115e18b6f5b94cfb02650916031b37d","modified":1688033306561},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1627608806000},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1627608806000},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1627608806000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1627608806000},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1627608806000},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1627608806000},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1627608806000},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1627608806000},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1627608806000},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1627608806000},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1627608806000},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1627608806000},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1627608806000},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1627608806000},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1627608806000},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1627608806000},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1627608806000},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1627608806000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1627608806000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"26a18235f279d79ba9b6b6e11baa29d983478a41","modified":1688117225082},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1627608806000},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1627608806000},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1627608806000},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1627608806000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1627608806000},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1627608806000},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1627608806000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1627608806000},{"_id":"themes/next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1627608806000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1627608806000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1627608806000},{"_id":"themes/next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1627608806000},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1627608806000},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1627608806000},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1627608806000},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1627608806000},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1627608806000},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1627608806000},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1627608806000},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1627608806000},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1627608806000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1627608806000},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1627608806000},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1627608806000},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1627608806000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1627608806000},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1627608806000},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1627608806000},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1627608806000},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1627608806000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1627608806000},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1627608806000},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1627608806000},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1627608806000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1627608806000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1627608806000},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1627608806000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1627608806000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1627608806000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1627608806000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1627608806000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1627608806000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1627608806000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1627608806000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1627608806000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1627608806000},{"_id":"themes/next/source/js/.DS_Store","hash":"c4ce23100489a326725bae5f61a09e862a9a0d25","modified":1688033306557},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1627608806000},{"_id":"themes/next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1627608806000},{"_id":"themes/next/source/images/tou.png","hash":"e4391db4e995315584b8295b6a36833e10bdb704","modified":1688115829542},{"_id":"themes/next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1627608806000},{"_id":"themes/next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1627608806000},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1627608806000},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1627608806000},{"_id":"themes/next/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1627608806000},{"_id":"themes/next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1627608806000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1627608806000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1627608806000},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1627608806000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1627608806000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1627608806000},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1627608806000},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1627608806000},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1627608806000},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1627608806000},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1627608806000},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1627608806000},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1627608806000},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1627608806000},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1627608806000},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1627608806000},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1627608806000},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1627608806000},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1627608806000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1627608806000},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1627608806000},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1627608806000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1627608806000},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1627608806000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1627608806000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1627608806000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1627608806000},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1627608806000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1627608806000},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1627608806000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1627608806000},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1627608806000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1627608806000},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1627608806000},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1627608806000},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1627608806000},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1627608806000},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1627608806000},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1627608806000},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1627608806000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1627608806000},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1627608806000},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1627608806000},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1627608806000},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1627608806000},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1627608806000},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1627608806000},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1627608806000},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1627608806000},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1627608806000},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1627608806000},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1627608806000},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1627608806000},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1627608806000},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1627608806000},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1627608806000},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1627608806000},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1627608806000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1627608806000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1627608806000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1627608806000},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1627608806000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1627608806000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1627608806000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1627608806000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1627608806000},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1627608806000},{"_id":"themes/next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1627608806000},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1627608806000},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1627608806000},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1627608806000},{"_id":"source/_posts/BeanFactoryPostProcessor后置处理器分析/6.jpg","hash":"1d28343687b9a840b05a17a8a5188032d7f547f1","modified":1679040353024},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1627608806000},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1627608806000},{"_id":"source/_posts/池化技术导致cpu占用飙高问题分析/阻塞.jpg","hash":"86cc07c8f72c7ab7a78fae4c5eff8729f23da49c","modified":1693465686817},{"_id":"source/_posts/BeanFactoryPostProcessor后置处理器分析/5.jpg","hash":"a2f297a5afc70e64e3cb6fc03fe98408763d3279","modified":1679039631917},{"_id":"themes/next/package-lock.json","hash":"4c108abfe1aab0d214ec658a51f5a6cadb383f4b","modified":1688032267340},{"_id":"source/_posts/池化技术导致cpu占用飙高问题分析/状态同步服务模块线程日志.log","hash":"67142a4503c886a10764a1000bc5d1a3d27a2f7a","modified":1692172753118},{"_id":"public/search.xml","hash":"675174f2c1dac4ff36e15db74fc5036dfef1ba47","modified":1693470201739},{"_id":"public/2023/07/26/Taro学习/index.html","hash":"9b472dcf3d111de4e810a78fb6d2ef1a0d058a18","modified":1693470201739},{"_id":"public/2023/07/03/遍历redis删除生产key/index.html","hash":"9a1b53ef547488226cd4dd964a98791b49f47a19","modified":1693470201739},{"_id":"public/2020/01/03/mysql知识/index.html","hash":"9ead2446e9cfd9ea29b335200dccb0357a258285","modified":1693470201739},{"_id":"public/2017/03/29/循环依赖/index.html","hash":"356c91bb54ea361e5ac45c6b4799d561a556739a","modified":1693470201739},{"_id":"public/archives/index.html","hash":"4b2a4e974672cf18f8ebdd0566baff4ed70e9ccb","modified":1693470201739},{"_id":"public/archives/2017/index.html","hash":"d6408d7f9b538dee51d788a49ef242f7ac2ab495","modified":1693470201739},{"_id":"public/archives/2017/08/index.html","hash":"f6ef567dd6a8cae260bb5dd542db31a68836bf08","modified":1693470201739},{"_id":"public/archives/2017/03/index.html","hash":"313796ea601f4e0ea5edf8124afce75332ad69f0","modified":1693470201739},{"_id":"public/archives/2020/01/index.html","hash":"00fa169694915aa255e429ba4ecf3bb633683b6e","modified":1693470201739},{"_id":"public/archives/2020/index.html","hash":"6e13ea938367eaa3590343db852396004f132403","modified":1693470201739},{"_id":"public/archives/2023/index.html","hash":"0f0dca8804f92b23c8e2b14eeb5229057938dd0f","modified":1693470201739},{"_id":"public/archives/2023/07/index.html","hash":"acab0a8e73c54e33a2be694836cb90d7fb9283dc","modified":1693470201739},{"_id":"public/archives/2023/06/index.html","hash":"23741b00396343bafbf19f33d4b2d76c14bbd47b","modified":1693470201739},{"_id":"public/archives/2023/08/index.html","hash":"25561b8af5e74f34cfd987b599df43261fabff7e","modified":1693470201739},{"_id":"public/tags/spring/index.html","hash":"14bddc353c78aea00d2ee951feadf54b1d7cf3f0","modified":1693470201739},{"_id":"public/tags/前端/index.html","hash":"70ae82f128d67fb86363d6283bcfdf954cd91286","modified":1693470201739},{"_id":"public/2023/08/31/池化技术导致cpu占用飙高问题分析/index.html","hash":"0ae2afd306438625be22910980738462b549f5c4","modified":1693470201739},{"_id":"public/2023/07/03/springboot的自动装配/index.html","hash":"f1b6c9203e4b857041acc1b656ab5c69a56a525c","modified":1693470201739},{"_id":"public/2023/06/29/FactoryBean一探究竟-md/index.html","hash":"d979db564d4b1d55d83b862e7ca177c34f9fa959","modified":1693470201739},{"_id":"public/2017/08/29/BeanFactoryPostProcessor后置处理器分析/index.html","hash":"f4093404cf5da8f0a20498ed6e8a2c7c6983f998","modified":1693470201739},{"_id":"public/index.html","hash":"41ad22a29fb8f9a47d72ed5c8fcbf67479ae6612","modified":1693470201739},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1693470201739},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1693470201739},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1693470201739},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1693470201739},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1693470201739},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1693470201739},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1693470201739},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1693470201739},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1693470201739},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1693470201739},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1693470201739},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1693470201739},{"_id":"public/images/tou.png","hash":"e4391db4e995315584b8295b6a36833e10bdb704","modified":1693470201739},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1693470201739},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1693470201739},{"_id":"public/2023/06/29/FactoryBean一探究竟-md/4.png","hash":"d0fb262d01ff1eba00498c32aa486a77a4b0774f","modified":1693470201739},{"_id":"public/2023/08/31/池化技术导致cpu占用飙高问题分析/线程统计2.jpg","hash":"016f8cdc2dd83ed1034534ac32caf5ff68490b1d","modified":1693470201739},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1693470201739},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1693470201739},{"_id":"public/2023/06/29/FactoryBean一探究竟-md/3.png","hash":"377a4fd1ed85b76b2edf36f723540707ba0d9d6e","modified":1693470201739},{"_id":"public/2023/08/31/池化技术导致cpu占用飙高问题分析/线程占用情况.png","hash":"e8ac7e6da39bfbd127824869aa897f882a0834f1","modified":1693470201739},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1693470201739},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1693470201739},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1693470201739},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1693470201739},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1693470201739},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1693470201739},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1693470201739},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1693470201739},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1693470201739},{"_id":"public/css/main.css","hash":"d091fbbd8ecc297f25ec134e8489f89cef92b58a","modified":1693470201739},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1693470201739},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1693470201739},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1693470201739},{"_id":"public/2023/06/29/FactoryBean一探究竟-md/1677834219275.jpg","hash":"854d00c053317bb63ee1bd7fd28c7ba63a80655d","modified":1693470201739},{"_id":"public/2023/06/29/FactoryBean一探究竟-md/1677828665083.jpg","hash":"79e9cdf0a7476a964ed2d4eff222e008d97cf2a0","modified":1693470201739},{"_id":"public/2023/06/29/FactoryBean一探究竟-md/1.jpg","hash":"e99ef8162018e7f64b2c3d0f6e547fe18cbfb17e","modified":1693470201739},{"_id":"public/2023/08/31/池化技术导致cpu占用飙高问题分析/线程分析1.jpg","hash":"6dfdc28799ece46cd2b929d414bec6ca7553b05b","modified":1693470201739},{"_id":"public/2023/06/29/FactoryBean一探究竟-md/2.jpg","hash":"ca55c0cc65b5ef43fa3d8ace0fc392ceed3cb29e","modified":1693470201739},{"_id":"public/2023/08/31/池化技术导致cpu占用飙高问题分析/线程分析2.jpg","hash":"870507bd1c51aaab6cf675bf413ccc7011a26f94","modified":1693470201739},{"_id":"public/2023/08/31/池化技术导致cpu占用飙高问题分析/线程统计.jpg","hash":"b796c91c2de71f78b9bf39b0f4dcdb5a2c3a54b6","modified":1693470201739},{"_id":"public/2017/08/29/BeanFactoryPostProcessor后置处理器分析/6.jpg","hash":"1d28343687b9a840b05a17a8a5188032d7f547f1","modified":1693470201739},{"_id":"public/2017/08/29/BeanFactoryPostProcessor后置处理器分析/5.jpg","hash":"a2f297a5afc70e64e3cb6fc03fe98408763d3279","modified":1693470201739},{"_id":"public/2023/08/31/池化技术导致cpu占用飙高问题分析/阻塞.jpg","hash":"86cc07c8f72c7ab7a78fae4c5eff8729f23da49c","modified":1693470201739},{"_id":"public/2023/08/31/池化技术导致cpu占用飙高问题分析/状态同步服务模块线程日志.log","hash":"67142a4503c886a10764a1000bc5d1a3d27a2f7a","modified":1693470201739}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"BeanFactoryPostProcessor后置处理器分析","date":"2017-08-29T07:39:28.000Z","_content":"BeanFactoryPostProcessor接口\n\nbean工厂后置处理器,在bean创建之前，对bean工厂里的BeanDefinition对象进行加工处理，例如解释propertyValues属性\n\n```xml\n<bean id=\"xmlPropertiesBean\" class=\"com.XmlPropertiesBean\">\n    <property name=\"loginUrl\" value=\"${loginUrl}\"></property>\n</bean>\n```\n\n对${loginUrl}的解释替换工作由**PropertySourcesPlaceholderConfigurer**类完成。下面进入debug模式，验证解析过程。\n\n首先在类**PlaceholderConfigurerSupport**的**doProcessProperties**方法的visitor.visitBeanDefinition(bd);所在行打上断点，并设置断点的条件**\"xmlPropertiesBean\".equals(curName)**，如下图\n<!--more-->\n\n![5](./BeanFactoryPostProcessor后置处理器分析/5.jpg)\n\n在断点处进行Evaluate执行代码，查看xmlPropertiesBean的loginUrl属性值，可以发现，该值还未替换。此时还没执行完PlaceholderConfigurerSupport后置处理器，接着F8单步执行完visitor.visitBeanDefinition(bd);该行代码，再观察xmlPropertiesBean的loginUrl属性值为www.baidu.com如下图\n\n![6](./BeanFactoryPostProcessor后置处理器分析/6.jpg)\n\n\n\n**visitor.visitBeanDefinition访问者模式**\n\n注意注解@Value(\"${loginUrl}\")并不是由BeanFactoryPostProcessor解析的,下面的Value注解源码，可以看出@Value是AutowiredAnnotationBeanPostProcessor解释的。也就是由BeanPostProcessor处理的，和Autowired一样。\n\n```java\npackage org.springframework.beans.factory.annotation;\n\nimport java.lang.annotation.Documented;\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n/**\n * Annotation used at the field or method/constructor parameter level\n * that indicates a default value expression for the annotated element.\n *\n * <p>Typically used for expression-driven or property-driven dependency injection.\n * Also supported for dynamic resolution of handler method arguments &mdash; for\n * example, in Spring MVC.\n *\n * <p>A common use case is to inject values using\n * <code>#{systemProperties.myProp}</code> style SpEL (Spring Expression Language)\n * expressions. Alternatively, values may be injected using\n * <code>${my.app.myProp}</code> style property placeholders.\n *\n * <p>Note that actual processing of the {@code @Value} annotation is performed\n * by a {@link org.springframework.beans.factory.config.BeanPostProcessor\n * BeanPostProcessor} which in turn means that you <em>cannot</em> use\n * {@code @Value} within\n * {@link org.springframework.beans.factory.config.BeanPostProcessor\n * BeanPostProcessor} or\n * {@link org.springframework.beans.factory.config.BeanFactoryPostProcessor BeanFactoryPostProcessor}\n * types. Please consult the javadoc for the {@link AutowiredAnnotationBeanPostProcessor}\n * class (which, by default, checks for the presence of this annotation).\n *\n * @author Juergen Hoeller\n * @since 3.0\n * @see AutowiredAnnotationBeanPostProcessor\n * @see Autowired\n * @see org.springframework.beans.factory.config.BeanExpressionResolver\n * @see org.springframework.beans.factory.support.AutowireCandidateResolver#getSuggestedValue\n */\n@Target({ElementType.FIELD, ElementType.METHOD, ElementType.PARAMETER, ElementType.ANNOTATION_TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\npublic @interface Value {\n\n\t/**\n\t * The actual value expression such as <code>#{systemProperties.myProp}</code>\n\t * or property placeholder such as <code>${my.app.myProp}</code>.\n\t */\n\tString value();\n\n}\n```\n\n","source":"_posts/BeanFactoryPostProcessor后置处理器分析.md","raw":"---\ntitle: BeanFactoryPostProcessor后置处理器分析\ndate: 2017-08-29 15:39:28\ntags:\n---\nBeanFactoryPostProcessor接口\n\nbean工厂后置处理器,在bean创建之前，对bean工厂里的BeanDefinition对象进行加工处理，例如解释propertyValues属性\n\n```xml\n<bean id=\"xmlPropertiesBean\" class=\"com.XmlPropertiesBean\">\n    <property name=\"loginUrl\" value=\"${loginUrl}\"></property>\n</bean>\n```\n\n对${loginUrl}的解释替换工作由**PropertySourcesPlaceholderConfigurer**类完成。下面进入debug模式，验证解析过程。\n\n首先在类**PlaceholderConfigurerSupport**的**doProcessProperties**方法的visitor.visitBeanDefinition(bd);所在行打上断点，并设置断点的条件**\"xmlPropertiesBean\".equals(curName)**，如下图\n<!--more-->\n\n![5](./BeanFactoryPostProcessor后置处理器分析/5.jpg)\n\n在断点处进行Evaluate执行代码，查看xmlPropertiesBean的loginUrl属性值，可以发现，该值还未替换。此时还没执行完PlaceholderConfigurerSupport后置处理器，接着F8单步执行完visitor.visitBeanDefinition(bd);该行代码，再观察xmlPropertiesBean的loginUrl属性值为www.baidu.com如下图\n\n![6](./BeanFactoryPostProcessor后置处理器分析/6.jpg)\n\n\n\n**visitor.visitBeanDefinition访问者模式**\n\n注意注解@Value(\"${loginUrl}\")并不是由BeanFactoryPostProcessor解析的,下面的Value注解源码，可以看出@Value是AutowiredAnnotationBeanPostProcessor解释的。也就是由BeanPostProcessor处理的，和Autowired一样。\n\n```java\npackage org.springframework.beans.factory.annotation;\n\nimport java.lang.annotation.Documented;\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n/**\n * Annotation used at the field or method/constructor parameter level\n * that indicates a default value expression for the annotated element.\n *\n * <p>Typically used for expression-driven or property-driven dependency injection.\n * Also supported for dynamic resolution of handler method arguments &mdash; for\n * example, in Spring MVC.\n *\n * <p>A common use case is to inject values using\n * <code>#{systemProperties.myProp}</code> style SpEL (Spring Expression Language)\n * expressions. Alternatively, values may be injected using\n * <code>${my.app.myProp}</code> style property placeholders.\n *\n * <p>Note that actual processing of the {@code @Value} annotation is performed\n * by a {@link org.springframework.beans.factory.config.BeanPostProcessor\n * BeanPostProcessor} which in turn means that you <em>cannot</em> use\n * {@code @Value} within\n * {@link org.springframework.beans.factory.config.BeanPostProcessor\n * BeanPostProcessor} or\n * {@link org.springframework.beans.factory.config.BeanFactoryPostProcessor BeanFactoryPostProcessor}\n * types. Please consult the javadoc for the {@link AutowiredAnnotationBeanPostProcessor}\n * class (which, by default, checks for the presence of this annotation).\n *\n * @author Juergen Hoeller\n * @since 3.0\n * @see AutowiredAnnotationBeanPostProcessor\n * @see Autowired\n * @see org.springframework.beans.factory.config.BeanExpressionResolver\n * @see org.springframework.beans.factory.support.AutowireCandidateResolver#getSuggestedValue\n */\n@Target({ElementType.FIELD, ElementType.METHOD, ElementType.PARAMETER, ElementType.ANNOTATION_TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\npublic @interface Value {\n\n\t/**\n\t * The actual value expression such as <code>#{systemProperties.myProp}</code>\n\t * or property placeholder such as <code>${my.app.myProp}</code>.\n\t */\n\tString value();\n\n}\n```\n\n","slug":"BeanFactoryPostProcessor后置处理器分析","published":1,"updated":"2023-06-30T08:43:47.838Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllywfmp90000bytogz0bend6","content":"<p>BeanFactoryPostProcessor接口</p>\n<p>bean工厂后置处理器,在bean创建之前，对bean工厂里的BeanDefinition对象进行加工处理，例如解释propertyValues属性</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;xmlPropertiesBean&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.XmlPropertiesBean&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;loginUrl&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;loginUrl&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>对${loginUrl}的解释替换工作由<strong>PropertySourcesPlaceholderConfigurer</strong>类完成。下面进入debug模式，验证解析过程。</p>\n<p>首先在类<strong>PlaceholderConfigurerSupport</strong>的<strong>doProcessProperties</strong>方法的visitor.visitBeanDefinition(bd);所在行打上断点，并设置断点的条件**”xmlPropertiesBean”.equals(curName)**，如下图</p>\n<span id=\"more\"></span>\n\n<p><img src=\"/2017/08/29/BeanFactoryPostProcessor%E5%90%8E%E7%BD%AE%E5%A4%84%E7%90%86%E5%99%A8%E5%88%86%E6%9E%90/5.jpg\" alt=\"5\"></p>\n<p>在断点处进行Evaluate执行代码，查看xmlPropertiesBean的loginUrl属性值，可以发现，该值还未替换。此时还没执行完PlaceholderConfigurerSupport后置处理器，接着F8单步执行完visitor.visitBeanDefinition(bd);该行代码，再观察xmlPropertiesBean的loginUrl属性值为<a href=\"http://www.baidu.com如下图/\">www.baidu.com如下图</a></p>\n<p><img src=\"/2017/08/29/BeanFactoryPostProcessor%E5%90%8E%E7%BD%AE%E5%A4%84%E7%90%86%E5%99%A8%E5%88%86%E6%9E%90/6.jpg\" alt=\"6\"></p>\n<p><strong>visitor.visitBeanDefinition访问者模式</strong></p>\n<p>注意注解@Value(“${loginUrl}”)并不是由BeanFactoryPostProcessor解析的,下面的Value注解源码，可以看出@Value是AutowiredAnnotationBeanPostProcessor解释的。也就是由BeanPostProcessor处理的，和Autowired一样。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.springframework.beans.factory.annotation;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Documented;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.ElementType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Retention;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Target;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Annotation used at the field or method/constructor parameter level</span></span><br><span class=\"line\"><span class=\"comment\"> * that indicates a default value expression for the annotated element.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;Typically used for expression-driven or property-driven dependency injection.</span></span><br><span class=\"line\"><span class=\"comment\"> * Also supported for dynamic resolution of handler method arguments &amp;mdash; for</span></span><br><span class=\"line\"><span class=\"comment\"> * example, in Spring MVC.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;A common use case is to inject values using</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;code&gt;#&#123;systemProperties.myProp&#125;&lt;/code&gt; style SpEL (Spring Expression Language)</span></span><br><span class=\"line\"><span class=\"comment\"> * expressions. Alternatively, values may be injected using</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;code&gt;$&#123;my.app.myProp&#125;&lt;/code&gt; style property placeholders.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;Note that actual processing of the &#123;<span class=\"doctag\">@code</span> <span class=\"doctag\">@Value</span>&#125; annotation is performed</span></span><br><span class=\"line\"><span class=\"comment\"> * by a &#123;<span class=\"doctag\">@link</span> org.springframework.beans.factory.config.BeanPostProcessor</span></span><br><span class=\"line\"><span class=\"comment\"> * BeanPostProcessor&#125; which in turn means that you &lt;em&gt;cannot&lt;/em&gt; use</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@code</span> <span class=\"doctag\">@Value</span>&#125; within</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@link</span> org.springframework.beans.factory.config.BeanPostProcessor</span></span><br><span class=\"line\"><span class=\"comment\"> * BeanPostProcessor&#125; or</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@link</span> org.springframework.beans.factory.config.BeanFactoryPostProcessor BeanFactoryPostProcessor&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * types. Please consult the javadoc for the &#123;<span class=\"doctag\">@link</span> AutowiredAnnotationBeanPostProcessor&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * class (which, by default, checks for the presence of this annotation).</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Juergen Hoeller</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 3.0</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> AutowiredAnnotationBeanPostProcessor</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> Autowired</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> org.springframework.beans.factory.config.BeanExpressionResolver</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> org.springframework.beans.factory.support.AutowireCandidateResolver#getSuggestedValue</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.FIELD, ElementType.METHOD, ElementType.PARAMETER, ElementType.ANNOTATION_TYPE&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Value &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * The actual value expression such as &lt;code&gt;#&#123;systemProperties.myProp&#125;&lt;/code&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t * or property placeholder such as &lt;code&gt;$&#123;my.app.myProp&#125;&lt;/code&gt;.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\tString <span class=\"title function_\">value</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>BeanFactoryPostProcessor接口</p>\n<p>bean工厂后置处理器,在bean创建之前，对bean工厂里的BeanDefinition对象进行加工处理，例如解释propertyValues属性</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;xmlPropertiesBean&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.XmlPropertiesBean&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;loginUrl&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;loginUrl&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>对${loginUrl}的解释替换工作由<strong>PropertySourcesPlaceholderConfigurer</strong>类完成。下面进入debug模式，验证解析过程。</p>\n<p>首先在类<strong>PlaceholderConfigurerSupport</strong>的<strong>doProcessProperties</strong>方法的visitor.visitBeanDefinition(bd);所在行打上断点，并设置断点的条件**”xmlPropertiesBean”.equals(curName)**，如下图</p>","more":"<p><img src=\"/2017/08/29/BeanFactoryPostProcessor%E5%90%8E%E7%BD%AE%E5%A4%84%E7%90%86%E5%99%A8%E5%88%86%E6%9E%90/5.jpg\" alt=\"5\"></p>\n<p>在断点处进行Evaluate执行代码，查看xmlPropertiesBean的loginUrl属性值，可以发现，该值还未替换。此时还没执行完PlaceholderConfigurerSupport后置处理器，接着F8单步执行完visitor.visitBeanDefinition(bd);该行代码，再观察xmlPropertiesBean的loginUrl属性值为<a href=\"http://www.baidu.com如下图/\">www.baidu.com如下图</a></p>\n<p><img src=\"/2017/08/29/BeanFactoryPostProcessor%E5%90%8E%E7%BD%AE%E5%A4%84%E7%90%86%E5%99%A8%E5%88%86%E6%9E%90/6.jpg\" alt=\"6\"></p>\n<p><strong>visitor.visitBeanDefinition访问者模式</strong></p>\n<p>注意注解@Value(“${loginUrl}”)并不是由BeanFactoryPostProcessor解析的,下面的Value注解源码，可以看出@Value是AutowiredAnnotationBeanPostProcessor解释的。也就是由BeanPostProcessor处理的，和Autowired一样。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.springframework.beans.factory.annotation;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Documented;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.ElementType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Retention;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Target;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Annotation used at the field or method/constructor parameter level</span></span><br><span class=\"line\"><span class=\"comment\"> * that indicates a default value expression for the annotated element.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;Typically used for expression-driven or property-driven dependency injection.</span></span><br><span class=\"line\"><span class=\"comment\"> * Also supported for dynamic resolution of handler method arguments &amp;mdash; for</span></span><br><span class=\"line\"><span class=\"comment\"> * example, in Spring MVC.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;A common use case is to inject values using</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;code&gt;#&#123;systemProperties.myProp&#125;&lt;/code&gt; style SpEL (Spring Expression Language)</span></span><br><span class=\"line\"><span class=\"comment\"> * expressions. Alternatively, values may be injected using</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;code&gt;$&#123;my.app.myProp&#125;&lt;/code&gt; style property placeholders.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;Note that actual processing of the &#123;<span class=\"doctag\">@code</span> <span class=\"doctag\">@Value</span>&#125; annotation is performed</span></span><br><span class=\"line\"><span class=\"comment\"> * by a &#123;<span class=\"doctag\">@link</span> org.springframework.beans.factory.config.BeanPostProcessor</span></span><br><span class=\"line\"><span class=\"comment\"> * BeanPostProcessor&#125; which in turn means that you &lt;em&gt;cannot&lt;/em&gt; use</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@code</span> <span class=\"doctag\">@Value</span>&#125; within</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@link</span> org.springframework.beans.factory.config.BeanPostProcessor</span></span><br><span class=\"line\"><span class=\"comment\"> * BeanPostProcessor&#125; or</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@link</span> org.springframework.beans.factory.config.BeanFactoryPostProcessor BeanFactoryPostProcessor&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * types. Please consult the javadoc for the &#123;<span class=\"doctag\">@link</span> AutowiredAnnotationBeanPostProcessor&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * class (which, by default, checks for the presence of this annotation).</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Juergen Hoeller</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 3.0</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> AutowiredAnnotationBeanPostProcessor</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> Autowired</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> org.springframework.beans.factory.config.BeanExpressionResolver</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> org.springframework.beans.factory.support.AutowireCandidateResolver#getSuggestedValue</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.FIELD, ElementType.METHOD, ElementType.PARAMETER, ElementType.ANNOTATION_TYPE&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Value &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * The actual value expression such as &lt;code&gt;#&#123;systemProperties.myProp&#125;&lt;/code&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t * or property placeholder such as &lt;code&gt;$&#123;my.app.myProp&#125;&lt;/code&gt;.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\tString <span class=\"title function_\">value</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"FactoryBean一探究竟.md","date":"2023-06-29T09:00:14.000Z","_content":"\n\n\n## Factorybean是什么？\n\nfactorybean是spring的一个接口类，是spring的一个扩展点之一。先来看一下具体的用法吧，不多说，上代码。源码\n\n创建一个普通的类UserService，注意这个类没加任何注解。[代码链接](https://github.com/caiyl/cai.git)\n\n<!--more-->\n\n```java\npackage com.chase.service;\n\nimport lombok.extern.slf4j.Slf4j;\n\n/**\n * @author chase\n * @date 2023/2/24 4:21 PM\n */\n@Slf4j\npublic class UserService {\n    public void test(){\n       log.info(\"test\");\n    }\n}\n```\n\n创建一个依赖了UserService的类\n\n```java\npackage com.chase.service;\n\n/**\n * @author chase\n * @date 2023/3/3 3:03 PM\n */\npublic class LoginService {\n    private UserService userService;\n\n    public LoginService(UserService userService) {\n        this.userService = userService;\n    }\n}\n\n```\n\n创建一个实现了FactoryBean接口的类，并重写**T getObject() throws Exception;**和**Class<?> getObjectType();**两个方法,注意该类加了注解@Service\n\n```java\npackage com.chase.service;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.FactoryBean;\nimport org.springframework.stereotype.Service;\n\n/**\n * @author chase\n * @date 2023/2/24 4:21 PM\n */\n@Slf4j\n@Service\npublic class UserServiceFactoryBean implements FactoryBean<UserService> {\n\n    @Override\n    public UserService getObject() throws Exception {\n        log.info(\"创建UserService对象\");\n        return new UserService();\n    }\n\n    @Override\n    public Class<?> getObjectType() {\n        return UserService.class;\n    }\n}\n\n\n```\n\n启动spring\n\n```java\npackage com.chase;\n\nimport com.chase.service.LoginService;\nimport com.chase.service.UserService;\nimport com.chase.service.UserServiceFactoryBean;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\n\n/**\n * @author chase\n * @date 2023/2/24 4:20 PM\n */\n@SpringBootApplication\npublic class BootApp {\n    public static void main(String[] args) {\n\n        ApplicationContext applicationContext = SpringApplication.run(BootApp.class, args);\n\n\n\n        Object bean = applicationContext.getBean(\"userServiceFactoryBean\");\n        System.out.println(\"bean userServiceFactoryBean instanceof UserServiceFactoryBean:\"+(bean instanceof UserServiceFactoryBean));\n        System.out.println(\"bean userServiceFactoryBean instanceof UserService:\"+(bean instanceof UserService));\n\n        Object bean1 = applicationContext.getBean(\"&userServiceFactoryBean\");\n        System.out.println(\"&userServiceFactoryBean instanceof UserServiceFactoryBean:\"+(bean1 instanceof UserServiceFactoryBean));\n        System.out.println(\"&userServiceFactoryBean instanceof UserService:\"+(bean1 instanceof UserService));\n\n\n    }\n\n    @Bean\n    public LoginService getLoginService(UserService userService) {\n        return new LoginService(userService);\n    }\n}\n\n```\n\n<img src=\"./FactoryBean一探究竟-md/1677828665083.jpg\" alt=\"image-20230303152959177\" style=\"zoom:50%;\" />\n\n**通过UserServiceFactoryBean创建了UserService对象的bean**。\n\n**什么时候调用FactoryBean的getObject创建对象？**\n\n从控制台打印的结果可以看出，在spring容器启动完成前，会调用getObject方法，创建对象。一定是这样吗。下面我们注释一下以下代码，再跑一次\n\n```java\n//    @Bean\n//    public LoginService getLoginService(UserService userService) {\n//        return new LoginService(userService);\n//    }\n```\n\n<img src=\"./FactoryBean一探究竟-md/1677834219275.jpg\" alt=\"image-20230303152959177\" style=\"zoom:50%;\" />\n\n为什么是spring容器启动完了才创建对象呢？在getObject方法入口处打个断点，看下堆栈信息如下\n\n![image-20230303172002986](./FactoryBean一探究竟-md/1.jpg)\n\n由此可见spring容器启动不会创建对象，当你需要用到factorybean里的对象是，才会进行初始化对象。再放开上面的代码注释，打个断点执行观察如下图\n\n![image-20230303173015635](./FactoryBean一探究竟-md/2.jpg)\n\n**上图可以看出在spring容器启动初始化阶段，由于创建LoginService类的bean需要userService，所以spring会去容器内部通过getBean获取UserService对象，发现不存在UserService对象时，找到能创建UserService对象的FactoryBean对象创建。** 总结一下**需要才创建**\n\n**直接在UserService类加@Service注解不是更香吗，为什么要有这个骚操作创建对象**\n\n假如要创建的对象很复杂，假如bean对象没有实现类呢，有没有那些地方用到了这个Factorybean值得学习的呢？当然有，要不然不就白白浪费了。其中大名鼎鼎的mybaits，还有spring cloud家族的OpenFeign都用到了。\n\n![image-20230303173015635](./FactoryBean一探究竟-md/3.png)\n\n![image-20230303173015635](./FactoryBean一探究竟-md/4.png)\n\n这两个factoryBean都是利用动态代理生产代理类，交给spring容器管理。","source":"_posts/FactoryBean一探究竟-md.md","raw":"---\ntitle: FactoryBean一探究竟.md\ndate: 2023-06-29 17:00:14\ntags: spring\n---\n\n\n\n## Factorybean是什么？\n\nfactorybean是spring的一个接口类，是spring的一个扩展点之一。先来看一下具体的用法吧，不多说，上代码。源码\n\n创建一个普通的类UserService，注意这个类没加任何注解。[代码链接](https://github.com/caiyl/cai.git)\n\n<!--more-->\n\n```java\npackage com.chase.service;\n\nimport lombok.extern.slf4j.Slf4j;\n\n/**\n * @author chase\n * @date 2023/2/24 4:21 PM\n */\n@Slf4j\npublic class UserService {\n    public void test(){\n       log.info(\"test\");\n    }\n}\n```\n\n创建一个依赖了UserService的类\n\n```java\npackage com.chase.service;\n\n/**\n * @author chase\n * @date 2023/3/3 3:03 PM\n */\npublic class LoginService {\n    private UserService userService;\n\n    public LoginService(UserService userService) {\n        this.userService = userService;\n    }\n}\n\n```\n\n创建一个实现了FactoryBean接口的类，并重写**T getObject() throws Exception;**和**Class<?> getObjectType();**两个方法,注意该类加了注解@Service\n\n```java\npackage com.chase.service;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.FactoryBean;\nimport org.springframework.stereotype.Service;\n\n/**\n * @author chase\n * @date 2023/2/24 4:21 PM\n */\n@Slf4j\n@Service\npublic class UserServiceFactoryBean implements FactoryBean<UserService> {\n\n    @Override\n    public UserService getObject() throws Exception {\n        log.info(\"创建UserService对象\");\n        return new UserService();\n    }\n\n    @Override\n    public Class<?> getObjectType() {\n        return UserService.class;\n    }\n}\n\n\n```\n\n启动spring\n\n```java\npackage com.chase;\n\nimport com.chase.service.LoginService;\nimport com.chase.service.UserService;\nimport com.chase.service.UserServiceFactoryBean;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\n\n/**\n * @author chase\n * @date 2023/2/24 4:20 PM\n */\n@SpringBootApplication\npublic class BootApp {\n    public static void main(String[] args) {\n\n        ApplicationContext applicationContext = SpringApplication.run(BootApp.class, args);\n\n\n\n        Object bean = applicationContext.getBean(\"userServiceFactoryBean\");\n        System.out.println(\"bean userServiceFactoryBean instanceof UserServiceFactoryBean:\"+(bean instanceof UserServiceFactoryBean));\n        System.out.println(\"bean userServiceFactoryBean instanceof UserService:\"+(bean instanceof UserService));\n\n        Object bean1 = applicationContext.getBean(\"&userServiceFactoryBean\");\n        System.out.println(\"&userServiceFactoryBean instanceof UserServiceFactoryBean:\"+(bean1 instanceof UserServiceFactoryBean));\n        System.out.println(\"&userServiceFactoryBean instanceof UserService:\"+(bean1 instanceof UserService));\n\n\n    }\n\n    @Bean\n    public LoginService getLoginService(UserService userService) {\n        return new LoginService(userService);\n    }\n}\n\n```\n\n<img src=\"./FactoryBean一探究竟-md/1677828665083.jpg\" alt=\"image-20230303152959177\" style=\"zoom:50%;\" />\n\n**通过UserServiceFactoryBean创建了UserService对象的bean**。\n\n**什么时候调用FactoryBean的getObject创建对象？**\n\n从控制台打印的结果可以看出，在spring容器启动完成前，会调用getObject方法，创建对象。一定是这样吗。下面我们注释一下以下代码，再跑一次\n\n```java\n//    @Bean\n//    public LoginService getLoginService(UserService userService) {\n//        return new LoginService(userService);\n//    }\n```\n\n<img src=\"./FactoryBean一探究竟-md/1677834219275.jpg\" alt=\"image-20230303152959177\" style=\"zoom:50%;\" />\n\n为什么是spring容器启动完了才创建对象呢？在getObject方法入口处打个断点，看下堆栈信息如下\n\n![image-20230303172002986](./FactoryBean一探究竟-md/1.jpg)\n\n由此可见spring容器启动不会创建对象，当你需要用到factorybean里的对象是，才会进行初始化对象。再放开上面的代码注释，打个断点执行观察如下图\n\n![image-20230303173015635](./FactoryBean一探究竟-md/2.jpg)\n\n**上图可以看出在spring容器启动初始化阶段，由于创建LoginService类的bean需要userService，所以spring会去容器内部通过getBean获取UserService对象，发现不存在UserService对象时，找到能创建UserService对象的FactoryBean对象创建。** 总结一下**需要才创建**\n\n**直接在UserService类加@Service注解不是更香吗，为什么要有这个骚操作创建对象**\n\n假如要创建的对象很复杂，假如bean对象没有实现类呢，有没有那些地方用到了这个Factorybean值得学习的呢？当然有，要不然不就白白浪费了。其中大名鼎鼎的mybaits，还有spring cloud家族的OpenFeign都用到了。\n\n![image-20230303173015635](./FactoryBean一探究竟-md/3.png)\n\n![image-20230303173015635](./FactoryBean一探究竟-md/4.png)\n\n这两个factoryBean都是利用动态代理生产代理类，交给spring容器管理。","slug":"FactoryBean一探究竟-md","published":1,"updated":"2023-06-30T08:42:17.841Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllywfmpc0001byto6mi2azir","content":"<h2 id=\"Factorybean是什么？\"><a href=\"#Factorybean是什么？\" class=\"headerlink\" title=\"Factorybean是什么？\"></a>Factorybean是什么？</h2><p>factorybean是spring的一个接口类，是spring的一个扩展点之一。先来看一下具体的用法吧，不多说，上代码。源码</p>\n<p>创建一个普通的类UserService，注意这个类没加任何注解。<a href=\"https://github.com/caiyl/cai.git\">代码链接</a></p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.chase.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> chase</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2023/2/24 4:21 PM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">       log.info(<span class=\"string\">&quot;test&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建一个依赖了UserService的类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.chase.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> chase</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2023/3/3 3:03 PM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LoginService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">LoginService</span><span class=\"params\">(UserService userService)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.userService = userService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>创建一个实现了FactoryBean接口的类，并重写**T getObject() throws Exception;<strong>和</strong>Class&lt;?&gt; getObjectType();**两个方法,注意该类加了注解@Service</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.chase.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.FactoryBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> chase</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2023/2/24 4:21 PM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserServiceFactoryBean</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">FactoryBean</span>&lt;UserService&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> UserService <span class=\"title function_\">getObject</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;创建UserService对象&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UserService</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> UserService.class;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>启动spring</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.chase;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.chase.service.LoginService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.chase.service.UserService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.chase.service.UserServiceFactoryBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> chase</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2023/2/24 4:20 PM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BootApp</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">ApplicationContext</span> <span class=\"variable\">applicationContext</span> <span class=\"operator\">=</span> SpringApplication.run(BootApp.class, args);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">bean</span> <span class=\"operator\">=</span> applicationContext.getBean(<span class=\"string\">&quot;userServiceFactoryBean&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;bean userServiceFactoryBean instanceof UserServiceFactoryBean:&quot;</span>+(bean <span class=\"keyword\">instanceof</span> UserServiceFactoryBean));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;bean userServiceFactoryBean instanceof UserService:&quot;</span>+(bean <span class=\"keyword\">instanceof</span> UserService));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">bean1</span> <span class=\"operator\">=</span> applicationContext.getBean(<span class=\"string\">&quot;&amp;userServiceFactoryBean&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;&amp;userServiceFactoryBean instanceof UserServiceFactoryBean:&quot;</span>+(bean1 <span class=\"keyword\">instanceof</span> UserServiceFactoryBean));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;&amp;userServiceFactoryBean instanceof UserService:&quot;</span>+(bean1 <span class=\"keyword\">instanceof</span> UserService));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> LoginService <span class=\"title function_\">getLoginService</span><span class=\"params\">(UserService userService)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LoginService</span>(userService);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<img src=\"/2023/06/29/FactoryBean%E4%B8%80%E6%8E%A2%E7%A9%B6%E7%AB%9F-md/1677828665083.jpg\" alt=\"image-20230303152959177\" style=\"zoom:50%;\">\n\n<p><strong>通过UserServiceFactoryBean创建了UserService对象的bean</strong>。</p>\n<p><strong>什么时候调用FactoryBean的getObject创建对象？</strong></p>\n<p>从控制台打印的结果可以看出，在spring容器启动完成前，会调用getObject方法，创建对象。一定是这样吗。下面我们注释一下以下代码，再跑一次</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//    @Bean</span></span><br><span class=\"line\"><span class=\"comment\">//    public LoginService getLoginService(UserService userService) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        return new LoginService(userService);</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"/2023/06/29/FactoryBean%E4%B8%80%E6%8E%A2%E7%A9%B6%E7%AB%9F-md/1677834219275.jpg\" alt=\"image-20230303152959177\" style=\"zoom:50%;\">\n\n<p>为什么是spring容器启动完了才创建对象呢？在getObject方法入口处打个断点，看下堆栈信息如下</p>\n<p><img src=\"/2023/06/29/FactoryBean%E4%B8%80%E6%8E%A2%E7%A9%B6%E7%AB%9F-md/1.jpg\" alt=\"image-20230303172002986\"></p>\n<p>由此可见spring容器启动不会创建对象，当你需要用到factorybean里的对象是，才会进行初始化对象。再放开上面的代码注释，打个断点执行观察如下图</p>\n<p><img src=\"/2023/06/29/FactoryBean%E4%B8%80%E6%8E%A2%E7%A9%B6%E7%AB%9F-md/2.jpg\" alt=\"image-20230303173015635\"></p>\n<p><strong>上图可以看出在spring容器启动初始化阶段，由于创建LoginService类的bean需要userService，所以spring会去容器内部通过getBean获取UserService对象，发现不存在UserService对象时，找到能创建UserService对象的FactoryBean对象创建。</strong> 总结一下<strong>需要才创建</strong></p>\n<p><strong>直接在UserService类加@Service注解不是更香吗，为什么要有这个骚操作创建对象</strong></p>\n<p>假如要创建的对象很复杂，假如bean对象没有实现类呢，有没有那些地方用到了这个Factorybean值得学习的呢？当然有，要不然不就白白浪费了。其中大名鼎鼎的mybaits，还有spring cloud家族的OpenFeign都用到了。</p>\n<p><img src=\"/2023/06/29/FactoryBean%E4%B8%80%E6%8E%A2%E7%A9%B6%E7%AB%9F-md/3.png\" alt=\"image-20230303173015635\"></p>\n<p><img src=\"/2023/06/29/FactoryBean%E4%B8%80%E6%8E%A2%E7%A9%B6%E7%AB%9F-md/4.png\" alt=\"image-20230303173015635\"></p>\n<p>这两个factoryBean都是利用动态代理生产代理类，交给spring容器管理。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"Factorybean是什么？\"><a href=\"#Factorybean是什么？\" class=\"headerlink\" title=\"Factorybean是什么？\"></a>Factorybean是什么？</h2><p>factorybean是spring的一个接口类，是spring的一个扩展点之一。先来看一下具体的用法吧，不多说，上代码。源码</p>\n<p>创建一个普通的类UserService，注意这个类没加任何注解。<a href=\"https://github.com/caiyl/cai.git\">代码链接</a></p>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.chase.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> chase</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2023/2/24 4:21 PM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">       log.info(<span class=\"string\">&quot;test&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建一个依赖了UserService的类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.chase.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> chase</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2023/3/3 3:03 PM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LoginService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">LoginService</span><span class=\"params\">(UserService userService)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.userService = userService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>创建一个实现了FactoryBean接口的类，并重写**T getObject() throws Exception;<strong>和</strong>Class&lt;?&gt; getObjectType();**两个方法,注意该类加了注解@Service</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.chase.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.FactoryBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> chase</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2023/2/24 4:21 PM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserServiceFactoryBean</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">FactoryBean</span>&lt;UserService&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> UserService <span class=\"title function_\">getObject</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;创建UserService对象&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UserService</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> UserService.class;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>启动spring</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.chase;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.chase.service.LoginService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.chase.service.UserService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.chase.service.UserServiceFactoryBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> chase</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2023/2/24 4:20 PM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BootApp</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">ApplicationContext</span> <span class=\"variable\">applicationContext</span> <span class=\"operator\">=</span> SpringApplication.run(BootApp.class, args);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">bean</span> <span class=\"operator\">=</span> applicationContext.getBean(<span class=\"string\">&quot;userServiceFactoryBean&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;bean userServiceFactoryBean instanceof UserServiceFactoryBean:&quot;</span>+(bean <span class=\"keyword\">instanceof</span> UserServiceFactoryBean));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;bean userServiceFactoryBean instanceof UserService:&quot;</span>+(bean <span class=\"keyword\">instanceof</span> UserService));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">bean1</span> <span class=\"operator\">=</span> applicationContext.getBean(<span class=\"string\">&quot;&amp;userServiceFactoryBean&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;&amp;userServiceFactoryBean instanceof UserServiceFactoryBean:&quot;</span>+(bean1 <span class=\"keyword\">instanceof</span> UserServiceFactoryBean));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;&amp;userServiceFactoryBean instanceof UserService:&quot;</span>+(bean1 <span class=\"keyword\">instanceof</span> UserService));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> LoginService <span class=\"title function_\">getLoginService</span><span class=\"params\">(UserService userService)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LoginService</span>(userService);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<img src=\"/2023/06/29/FactoryBean%E4%B8%80%E6%8E%A2%E7%A9%B6%E7%AB%9F-md/1677828665083.jpg\" alt=\"image-20230303152959177\" style=\"zoom:50%;\">\n\n<p><strong>通过UserServiceFactoryBean创建了UserService对象的bean</strong>。</p>\n<p><strong>什么时候调用FactoryBean的getObject创建对象？</strong></p>\n<p>从控制台打印的结果可以看出，在spring容器启动完成前，会调用getObject方法，创建对象。一定是这样吗。下面我们注释一下以下代码，再跑一次</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//    @Bean</span></span><br><span class=\"line\"><span class=\"comment\">//    public LoginService getLoginService(UserService userService) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        return new LoginService(userService);</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"/2023/06/29/FactoryBean%E4%B8%80%E6%8E%A2%E7%A9%B6%E7%AB%9F-md/1677834219275.jpg\" alt=\"image-20230303152959177\" style=\"zoom:50%;\">\n\n<p>为什么是spring容器启动完了才创建对象呢？在getObject方法入口处打个断点，看下堆栈信息如下</p>\n<p><img src=\"/2023/06/29/FactoryBean%E4%B8%80%E6%8E%A2%E7%A9%B6%E7%AB%9F-md/1.jpg\" alt=\"image-20230303172002986\"></p>\n<p>由此可见spring容器启动不会创建对象，当你需要用到factorybean里的对象是，才会进行初始化对象。再放开上面的代码注释，打个断点执行观察如下图</p>\n<p><img src=\"/2023/06/29/FactoryBean%E4%B8%80%E6%8E%A2%E7%A9%B6%E7%AB%9F-md/2.jpg\" alt=\"image-20230303173015635\"></p>\n<p><strong>上图可以看出在spring容器启动初始化阶段，由于创建LoginService类的bean需要userService，所以spring会去容器内部通过getBean获取UserService对象，发现不存在UserService对象时，找到能创建UserService对象的FactoryBean对象创建。</strong> 总结一下<strong>需要才创建</strong></p>\n<p><strong>直接在UserService类加@Service注解不是更香吗，为什么要有这个骚操作创建对象</strong></p>\n<p>假如要创建的对象很复杂，假如bean对象没有实现类呢，有没有那些地方用到了这个Factorybean值得学习的呢？当然有，要不然不就白白浪费了。其中大名鼎鼎的mybaits，还有spring cloud家族的OpenFeign都用到了。</p>\n<p><img src=\"/2023/06/29/FactoryBean%E4%B8%80%E6%8E%A2%E7%A9%B6%E7%AB%9F-md/3.png\" alt=\"image-20230303173015635\"></p>\n<p><img src=\"/2023/06/29/FactoryBean%E4%B8%80%E6%8E%A2%E7%A9%B6%E7%AB%9F-md/4.png\" alt=\"image-20230303173015635\"></p>\n<p>这两个factoryBean都是利用动态代理生产代理类，交给spring容器管理。</p>"},{"title":"Taro学习","date":"2023-07-26T09:49:24.000Z","_content":"\n# 安装 \n\n终端命令安装：npm i -g @tarojs/cli ，注意当前的node版本。v18.17.0\n\n\n\n初始化项目 taro init\n\n安装路由 npm install vue-router --save\n\n","source":"_posts/Taro学习.md","raw":"---\ntitle: Taro学习\ndate: 2023-07-26 17:49:24\ntags: 前端\n---\n\n# 安装 \n\n终端命令安装：npm i -g @tarojs/cli ，注意当前的node版本。v18.17.0\n\n\n\n初始化项目 taro init\n\n安装路由 npm install vue-router --save\n\n","slug":"Taro学习","published":1,"updated":"2023-08-02T07:28:44.773Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllywfmpd0002byto7qnp1l3y","content":"<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>终端命令安装：npm i -g @tarojs&#x2F;cli ，注意当前的node版本。v18.17.0</p>\n<p>初始化项目 taro init</p>\n<p>安装路由 npm install vue-router –save</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>终端命令安装：npm i -g @tarojs&#x2F;cli ，注意当前的node版本。v18.17.0</p>\n<p>初始化项目 taro init</p>\n<p>安装路由 npm install vue-router –save</p>\n"},{"title":"mysql知识","date":"2020-01-03T01:51:57.000Z","_content":"## 批量插入测试数据\n\n```sql\nDROP PROCEDURE\n    IF EXISTS test_insert;\n\nDELIMITER ;;\nCREATE PROCEDURE test_insert()\n\nBEGIN\n    DECLARE number INT DEFAULT 1;\n    WHILE (number <= 10000) DO\n\n        insert into testabc(a,b,c) values(concat('a',number),concat('b',number),concat('c',number));\n        SET number = number + 1;\n        END WHILE;\n    commit;\nEND;;\nCALL test_insert();\n```\n\n## mysql日志\n\n### binlog\n\nbinlog是在**server层的**两个主要的用途\n\n1. 主从复制\n2. 数据恢复\n\nbinlog的格式也有3种\n\n1. statement：基于sql，数据有可能丢失，像now()函数\n2. row:文件大，数据不丢失\n3. Mixed\n\nUndolog\n\n## icp索引下推\n\n加上有联合索引a、b、c字段，where a =\n\n# ","source":"_posts/mysql知识.md","raw":"---\ntitle: mysql知识\ndate: 2020-01-03 09:51:57\ntags:\n---\n## 批量插入测试数据\n\n```sql\nDROP PROCEDURE\n    IF EXISTS test_insert;\n\nDELIMITER ;;\nCREATE PROCEDURE test_insert()\n\nBEGIN\n    DECLARE number INT DEFAULT 1;\n    WHILE (number <= 10000) DO\n\n        insert into testabc(a,b,c) values(concat('a',number),concat('b',number),concat('c',number));\n        SET number = number + 1;\n        END WHILE;\n    commit;\nEND;;\nCALL test_insert();\n```\n\n## mysql日志\n\n### binlog\n\nbinlog是在**server层的**两个主要的用途\n\n1. 主从复制\n2. 数据恢复\n\nbinlog的格式也有3种\n\n1. statement：基于sql，数据有可能丢失，像now()函数\n2. row:文件大，数据不丢失\n3. Mixed\n\nUndolog\n\n## icp索引下推\n\n加上有联合索引a、b、c字段，where a =\n\n# ","slug":"mysql知识","published":1,"updated":"2023-07-03T01:52:25.135Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllywfmpf0004bytoeiov4xwo","content":"<h2 id=\"批量插入测试数据\"><a href=\"#批量插入测试数据\" class=\"headerlink\" title=\"批量插入测试数据\"></a>批量插入测试数据</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">PROCEDURE</span></span><br><span class=\"line\">    IF <span class=\"keyword\">EXISTS</span> test_insert;</span><br><span class=\"line\"></span><br><span class=\"line\">DELIMITER ;;</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> test_insert()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">    <span class=\"keyword\">DECLARE</span> number <span class=\"type\">INT</span> <span class=\"keyword\">DEFAULT</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    WHILE (number <span class=\"operator\">&lt;=</span> <span class=\"number\">10000</span>) DO</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> testabc(a,b,c) <span class=\"keyword\">values</span>(concat(<span class=\"string\">&#x27;a&#x27;</span>,number),concat(<span class=\"string\">&#x27;b&#x27;</span>,number),concat(<span class=\"string\">&#x27;c&#x27;</span>,number));</span><br><span class=\"line\">        <span class=\"keyword\">SET</span> number <span class=\"operator\">=</span> number <span class=\"operator\">+</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">END</span> WHILE;</span><br><span class=\"line\">    <span class=\"keyword\">commit</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;;</span><br><span class=\"line\"><span class=\"keyword\">CALL</span> test_insert();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"mysql日志\"><a href=\"#mysql日志\" class=\"headerlink\" title=\"mysql日志\"></a>mysql日志</h2><h3 id=\"binlog\"><a href=\"#binlog\" class=\"headerlink\" title=\"binlog\"></a>binlog</h3><p>binlog是在<strong>server层的</strong>两个主要的用途</p>\n<ol>\n<li>主从复制</li>\n<li>数据恢复</li>\n</ol>\n<p>binlog的格式也有3种</p>\n<ol>\n<li>statement：基于sql，数据有可能丢失，像now()函数</li>\n<li>row:文件大，数据不丢失</li>\n<li>Mixed</li>\n</ol>\n<p>Undolog</p>\n<h2 id=\"icp索引下推\"><a href=\"#icp索引下推\" class=\"headerlink\" title=\"icp索引下推\"></a>icp索引下推</h2><p>加上有联合索引a、b、c字段，where a &#x3D;</p>\n<h1 id><a href=\"#\" class=\"headerlink\" title></a></h1>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"批量插入测试数据\"><a href=\"#批量插入测试数据\" class=\"headerlink\" title=\"批量插入测试数据\"></a>批量插入测试数据</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">PROCEDURE</span></span><br><span class=\"line\">    IF <span class=\"keyword\">EXISTS</span> test_insert;</span><br><span class=\"line\"></span><br><span class=\"line\">DELIMITER ;;</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> test_insert()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">    <span class=\"keyword\">DECLARE</span> number <span class=\"type\">INT</span> <span class=\"keyword\">DEFAULT</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    WHILE (number <span class=\"operator\">&lt;=</span> <span class=\"number\">10000</span>) DO</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> testabc(a,b,c) <span class=\"keyword\">values</span>(concat(<span class=\"string\">&#x27;a&#x27;</span>,number),concat(<span class=\"string\">&#x27;b&#x27;</span>,number),concat(<span class=\"string\">&#x27;c&#x27;</span>,number));</span><br><span class=\"line\">        <span class=\"keyword\">SET</span> number <span class=\"operator\">=</span> number <span class=\"operator\">+</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">END</span> WHILE;</span><br><span class=\"line\">    <span class=\"keyword\">commit</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;;</span><br><span class=\"line\"><span class=\"keyword\">CALL</span> test_insert();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"mysql日志\"><a href=\"#mysql日志\" class=\"headerlink\" title=\"mysql日志\"></a>mysql日志</h2><h3 id=\"binlog\"><a href=\"#binlog\" class=\"headerlink\" title=\"binlog\"></a>binlog</h3><p>binlog是在<strong>server层的</strong>两个主要的用途</p>\n<ol>\n<li>主从复制</li>\n<li>数据恢复</li>\n</ol>\n<p>binlog的格式也有3种</p>\n<ol>\n<li>statement：基于sql，数据有可能丢失，像now()函数</li>\n<li>row:文件大，数据不丢失</li>\n<li>Mixed</li>\n</ol>\n<p>Undolog</p>\n<h2 id=\"icp索引下推\"><a href=\"#icp索引下推\" class=\"headerlink\" title=\"icp索引下推\"></a>icp索引下推</h2><p>加上有联合索引a、b、c字段，where a &#x3D;</p>\n<h1 id><a href=\"#\" class=\"headerlink\" title></a></h1>"},{"title":"springboot的自动装配","date":"2023-07-03T01:47:57.000Z","_content":"\n**Import**\n\nImport可以导入一个普通的bean\n\n```java\npublic class PersonService {\n    public void sayHello(){\n        System.out.println(\"hello PersonService\");\n    }\n}\n```\n<!--more-->\nImport可以导入ImportSelector\n\n```java\npublic class WeatherImportSelector implements ImportSelector {\n    @Override\n    public String[] selectImports(AnnotationMetadata annotationMetadata) {\n        return new String[]{WeatherService.class.getName()};\n    }\n\n    @Override\n    public Predicate<String> getExclusionFilter() {\n        return ImportSelector.super.getExclusionFilter();\n    }\n}\n\n```\n\nImport可以导入Configuration\n\n```java\npackage com.third.configuration;\n\nimport com.third.service.LoginService;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * @author chase\n * @date 2023/3/6 4:56 PM\n */\n@Configuration\npublic class LoginConfiguration {\n\n    @Bean\n    public LoginService getLoginService(){\n        return new LoginService();\n    }\n}\n\n```\n\nImportSelector\n\nImportSelector可以导入多个bean\n\nConfiguration\n\nConfiguration是bean的配置文件\n\n**每个Enablexxx背后都是Import在作怪。spring boot start的几个关键点，注解EnableAutoConfiguration**\n\n```java\n@EnableCaching\n@EnableRabbit\n@EnableScheduling\n@EnableApolloConfig\n@EnableRedissonLock\n```\n\n```java\n@Import(CachingConfigurationSelector.class)\npublic @interface EnableCaching\n\n@Import(RabbitListenerConfigurationSelector.class)\npublic @interface EnableRabbit\n\n@Import(SchedulingConfiguration.class)\n@Documented\npublic @interface EnableScheduling\n\n@Import({ApolloConfigRegistrar.class})\npublic @interface EnableApolloConfig\n\n@Import({RedissonDistributedLockAutoConfiguration.class})\n@Target({ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\npublic @interface EnableRedissonLock\n```\n\n由此可见，spring的Enablexxx背后都是Import。\n\n**springboot的自动装配**\n\n听起来很高端，实际上也是Enablexxx与Import在起作用\n\n```java\n@Target({ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Inherited\n@SpringBootConfiguration\n@EnableAutoConfiguration\n@ComponentScan(\n    excludeFilters = {@Filter(\n    type = FilterType.CUSTOM,\n    classes = {TypeExcludeFilter.class}\n), @Filter(\n    type = FilterType.CUSTOM,\n    classes = {AutoConfigurationExcludeFilter.class}\n)}\n)\npublic @interface SpringBootApplication \n```\n\n@SpringBootApplication注解是一个组合注解，有EnableAutoConfiguration何SpringBootConfiguration注解。\n\nEnableAutoConfiguration\n\n```java\n@Import({AutoConfigurationImportSelector.class})\npublic @interface EnableAutoConfiguration\n```\n\n**自动装配也不过是Enablexxx+Import**\n\nAutoConfigurationImportSelector的部分代码如下\n\n```\n@Override\n\tpublic String[] selectImports(AnnotationMetadata annotationMetadata) {\n\t\tif (!isEnabled(annotationMetadata)) {\n\t\t\treturn NO_IMPORTS;\n\t\t}\n\t\tAutoConfigurationEntry autoConfigurationEntry = getAutoConfigurationEntry(annotationMetadata);\n\t\treturn StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());\n\t}\n\t\n\tprotected AutoConfigurationEntry getAutoConfigurationEntry(AnnotationMetadata annotationMetadata) {\n\t\tif (!isEnabled(annotationMetadata)) {\n\t\t\treturn EMPTY_ENTRY;\n\t\t}\n\t\tAnnotationAttributes attributes = getAttributes(annotationMetadata);\n\t\tList<String> configurations = getCandidateConfigurations(annotationMetadata, attributes);\n\t\tconfigurations = removeDuplicates(configurations);\n\t\tSet<String> exclusions = getExclusions(annotationMetadata, attributes);\n\t\tcheckExcludedClasses(configurations, exclusions);\n\t\tconfigurations.removeAll(exclusions);\n\t\tconfigurations = getConfigurationClassFilter().filter(configurations);\n\t\tfireAutoConfigurationImportEvents(configurations, exclusions);\n\t\treturn new AutoConfigurationEntry(configurations, exclusions);\n\t}\n\t\n\tprotected List<String> getCandidateConfigurations(AnnotationMetadata metadata, AnnotationAttributes attributes) {\n\t\tList<String> configurations = SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(),\n\t\t\t\tgetBeanClassLoader());\n\t\tAssert.notEmpty(configurations, \"No auto configuration classes found in META-INF/spring.factories. If you \"\n\t\t\t\t+ \"are using a custom packaging, make sure that file is correct.\");\n\t\treturn configurations;\n\t}\n```\n\n**AutoConfigurationImportSelector里的这三段代码用SpringFactoriesLoader类，加载了配置在类路径里的META-INF/spring.factories类。**\n\nMETA-INF/spring.factories里就是官方的starter的Configuration配置类。了解了自动装配和Enablexxx，再来手动写一个\n\nstarter就信手沾来了。\n\n1. pom依赖\n\n```xml\n<dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter</artifactId>\n            <version>2.3.4.RELEASE</version>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-configuration-processor</artifactId>\n            <version>2.3.4.RELEASE</version>\n            <optional>true</optional>\n        </dependency>\n    </dependencies>\n```\n\n\n\n2. 写好配置类\n\n```java\n@Configuration\npublic class HelloConfiguration {\n\n    @Bean\n    public HelloService getHelloService(){\n        return new HelloService();\n    }\n}\n\n```\n\n\n\n3. 在META-INF/spring.factories 加上\n\n```\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\norg.hello.configuration.HelloConfiguration\n```\n\n3个步骤即可完成一个starter。另外如果不想写META-INF/spring.factories文件，则写一个Enable注解\n\n```java\n@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Inherited\n@Import(HelloConfiguration.class)\npublic @interface EnableHello {\n}\n```\n\n在spring启动入口加上该注解即可\n\n```java\n@EnableHello\n@SpringBootApplication\npublic class BootApp \n```\n\n[代码链接](https://github.com/caiyl/cai.git)\n\n\n","source":"_posts/springboot的自动装配.md","raw":"---\ntitle: springboot的自动装配\ndate: 2023-07-03 09:47:57\ntags:\n---\n\n**Import**\n\nImport可以导入一个普通的bean\n\n```java\npublic class PersonService {\n    public void sayHello(){\n        System.out.println(\"hello PersonService\");\n    }\n}\n```\n<!--more-->\nImport可以导入ImportSelector\n\n```java\npublic class WeatherImportSelector implements ImportSelector {\n    @Override\n    public String[] selectImports(AnnotationMetadata annotationMetadata) {\n        return new String[]{WeatherService.class.getName()};\n    }\n\n    @Override\n    public Predicate<String> getExclusionFilter() {\n        return ImportSelector.super.getExclusionFilter();\n    }\n}\n\n```\n\nImport可以导入Configuration\n\n```java\npackage com.third.configuration;\n\nimport com.third.service.LoginService;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * @author chase\n * @date 2023/3/6 4:56 PM\n */\n@Configuration\npublic class LoginConfiguration {\n\n    @Bean\n    public LoginService getLoginService(){\n        return new LoginService();\n    }\n}\n\n```\n\nImportSelector\n\nImportSelector可以导入多个bean\n\nConfiguration\n\nConfiguration是bean的配置文件\n\n**每个Enablexxx背后都是Import在作怪。spring boot start的几个关键点，注解EnableAutoConfiguration**\n\n```java\n@EnableCaching\n@EnableRabbit\n@EnableScheduling\n@EnableApolloConfig\n@EnableRedissonLock\n```\n\n```java\n@Import(CachingConfigurationSelector.class)\npublic @interface EnableCaching\n\n@Import(RabbitListenerConfigurationSelector.class)\npublic @interface EnableRabbit\n\n@Import(SchedulingConfiguration.class)\n@Documented\npublic @interface EnableScheduling\n\n@Import({ApolloConfigRegistrar.class})\npublic @interface EnableApolloConfig\n\n@Import({RedissonDistributedLockAutoConfiguration.class})\n@Target({ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\npublic @interface EnableRedissonLock\n```\n\n由此可见，spring的Enablexxx背后都是Import。\n\n**springboot的自动装配**\n\n听起来很高端，实际上也是Enablexxx与Import在起作用\n\n```java\n@Target({ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Inherited\n@SpringBootConfiguration\n@EnableAutoConfiguration\n@ComponentScan(\n    excludeFilters = {@Filter(\n    type = FilterType.CUSTOM,\n    classes = {TypeExcludeFilter.class}\n), @Filter(\n    type = FilterType.CUSTOM,\n    classes = {AutoConfigurationExcludeFilter.class}\n)}\n)\npublic @interface SpringBootApplication \n```\n\n@SpringBootApplication注解是一个组合注解，有EnableAutoConfiguration何SpringBootConfiguration注解。\n\nEnableAutoConfiguration\n\n```java\n@Import({AutoConfigurationImportSelector.class})\npublic @interface EnableAutoConfiguration\n```\n\n**自动装配也不过是Enablexxx+Import**\n\nAutoConfigurationImportSelector的部分代码如下\n\n```\n@Override\n\tpublic String[] selectImports(AnnotationMetadata annotationMetadata) {\n\t\tif (!isEnabled(annotationMetadata)) {\n\t\t\treturn NO_IMPORTS;\n\t\t}\n\t\tAutoConfigurationEntry autoConfigurationEntry = getAutoConfigurationEntry(annotationMetadata);\n\t\treturn StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());\n\t}\n\t\n\tprotected AutoConfigurationEntry getAutoConfigurationEntry(AnnotationMetadata annotationMetadata) {\n\t\tif (!isEnabled(annotationMetadata)) {\n\t\t\treturn EMPTY_ENTRY;\n\t\t}\n\t\tAnnotationAttributes attributes = getAttributes(annotationMetadata);\n\t\tList<String> configurations = getCandidateConfigurations(annotationMetadata, attributes);\n\t\tconfigurations = removeDuplicates(configurations);\n\t\tSet<String> exclusions = getExclusions(annotationMetadata, attributes);\n\t\tcheckExcludedClasses(configurations, exclusions);\n\t\tconfigurations.removeAll(exclusions);\n\t\tconfigurations = getConfigurationClassFilter().filter(configurations);\n\t\tfireAutoConfigurationImportEvents(configurations, exclusions);\n\t\treturn new AutoConfigurationEntry(configurations, exclusions);\n\t}\n\t\n\tprotected List<String> getCandidateConfigurations(AnnotationMetadata metadata, AnnotationAttributes attributes) {\n\t\tList<String> configurations = SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(),\n\t\t\t\tgetBeanClassLoader());\n\t\tAssert.notEmpty(configurations, \"No auto configuration classes found in META-INF/spring.factories. If you \"\n\t\t\t\t+ \"are using a custom packaging, make sure that file is correct.\");\n\t\treturn configurations;\n\t}\n```\n\n**AutoConfigurationImportSelector里的这三段代码用SpringFactoriesLoader类，加载了配置在类路径里的META-INF/spring.factories类。**\n\nMETA-INF/spring.factories里就是官方的starter的Configuration配置类。了解了自动装配和Enablexxx，再来手动写一个\n\nstarter就信手沾来了。\n\n1. pom依赖\n\n```xml\n<dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter</artifactId>\n            <version>2.3.4.RELEASE</version>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-configuration-processor</artifactId>\n            <version>2.3.4.RELEASE</version>\n            <optional>true</optional>\n        </dependency>\n    </dependencies>\n```\n\n\n\n2. 写好配置类\n\n```java\n@Configuration\npublic class HelloConfiguration {\n\n    @Bean\n    public HelloService getHelloService(){\n        return new HelloService();\n    }\n}\n\n```\n\n\n\n3. 在META-INF/spring.factories 加上\n\n```\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\norg.hello.configuration.HelloConfiguration\n```\n\n3个步骤即可完成一个starter。另外如果不想写META-INF/spring.factories文件，则写一个Enable注解\n\n```java\n@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Inherited\n@Import(HelloConfiguration.class)\npublic @interface EnableHello {\n}\n```\n\n在spring启动入口加上该注解即可\n\n```java\n@EnableHello\n@SpringBootApplication\npublic class BootApp \n```\n\n[代码链接](https://github.com/caiyl/cai.git)\n\n\n","slug":"springboot的自动装配","published":1,"updated":"2023-07-03T01:49:38.759Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllywfmpg0008bytofeve73d9","content":"<p><strong>Import</strong></p>\n<p>Import可以导入一个普通的bean</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PersonService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sayHello</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;hello PersonService&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p>Import可以导入ImportSelector</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WeatherImportSelector</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ImportSelector</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;WeatherService.class.getName()&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Predicate&lt;String&gt; <span class=\"title function_\">getExclusionFilter</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ImportSelector.<span class=\"built_in\">super</span>.getExclusionFilter();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Import可以导入Configuration</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.third.configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.third.service.LoginService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> chase</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2023/3/6 4:56 PM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LoginConfiguration</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> LoginService <span class=\"title function_\">getLoginService</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LoginService</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>ImportSelector</p>\n<p>ImportSelector可以导入多个bean</p>\n<p>Configuration</p>\n<p>Configuration是bean的配置文件</p>\n<p><strong>每个Enablexxx背后都是Import在作怪。spring boot start的几个关键点，注解EnableAutoConfiguration</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableCaching</span></span><br><span class=\"line\"><span class=\"meta\">@EnableRabbit</span></span><br><span class=\"line\"><span class=\"meta\">@EnableScheduling</span></span><br><span class=\"line\"><span class=\"meta\">@EnableApolloConfig</span></span><br><span class=\"line\"><span class=\"meta\">@EnableRedissonLock</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Import(CachingConfigurationSelector.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableCaching</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Import(RabbitListenerConfigurationSelector.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableRabbit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Import(SchedulingConfiguration.class)</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableScheduling</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Import(&#123;ApolloConfigRegistrar.class&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableApolloConfig</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Import(&#123;RedissonDistributedLockAutoConfiguration.class&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableRedissonLock</span><br></pre></td></tr></table></figure>\n\n<p>由此可见，spring的Enablexxx背后都是Import。</p>\n<p><strong>springboot的自动装配</strong></p>\n<p>听起来很高端，实际上也是Enablexxx与Import在起作用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Inherited</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableAutoConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan(</span></span><br><span class=\"line\"><span class=\"meta\">    excludeFilters = &#123;@Filter(</span></span><br><span class=\"line\"><span class=\"meta\">    type = FilterType.CUSTOM,</span></span><br><span class=\"line\"><span class=\"meta\">    classes = &#123;TypeExcludeFilter.class&#125;</span></span><br><span class=\"line\"><span class=\"meta\">), @Filter(</span></span><br><span class=\"line\"><span class=\"meta\">    type = FilterType.CUSTOM,</span></span><br><span class=\"line\"><span class=\"meta\">    classes = &#123;AutoConfigurationExcludeFilter.class&#125;</span></span><br><span class=\"line\"><span class=\"meta\">)&#125;</span></span><br><span class=\"line\"><span class=\"meta\">)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> SpringBootApplication </span><br></pre></td></tr></table></figure>\n\n<p>@SpringBootApplication注解是一个组合注解，有EnableAutoConfiguration何SpringBootConfiguration注解。</p>\n<p>EnableAutoConfiguration</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Import(&#123;AutoConfigurationImportSelector.class&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableAutoConfiguration</span><br></pre></td></tr></table></figure>\n\n<p><strong>自动装配也不过是Enablexxx+Import</strong></p>\n<p>AutoConfigurationImportSelector的部分代码如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">\tpublic String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class=\"line\">\t\tif (!isEnabled(annotationMetadata)) &#123;</span><br><span class=\"line\">\t\t\treturn NO_IMPORTS;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tAutoConfigurationEntry autoConfigurationEntry = getAutoConfigurationEntry(annotationMetadata);</span><br><span class=\"line\">\t\treturn StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tprotected AutoConfigurationEntry getAutoConfigurationEntry(AnnotationMetadata annotationMetadata) &#123;</span><br><span class=\"line\">\t\tif (!isEnabled(annotationMetadata)) &#123;</span><br><span class=\"line\">\t\t\treturn EMPTY_ENTRY;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tAnnotationAttributes attributes = getAttributes(annotationMetadata);</span><br><span class=\"line\">\t\tList&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes);</span><br><span class=\"line\">\t\tconfigurations = removeDuplicates(configurations);</span><br><span class=\"line\">\t\tSet&lt;String&gt; exclusions = getExclusions(annotationMetadata, attributes);</span><br><span class=\"line\">\t\tcheckExcludedClasses(configurations, exclusions);</span><br><span class=\"line\">\t\tconfigurations.removeAll(exclusions);</span><br><span class=\"line\">\t\tconfigurations = getConfigurationClassFilter().filter(configurations);</span><br><span class=\"line\">\t\tfireAutoConfigurationImportEvents(configurations, exclusions);</span><br><span class=\"line\">\t\treturn new AutoConfigurationEntry(configurations, exclusions);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tprotected List&lt;String&gt; getCandidateConfigurations(AnnotationMetadata metadata, AnnotationAttributes attributes) &#123;</span><br><span class=\"line\">\t\tList&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(),</span><br><span class=\"line\">\t\t\t\tgetBeanClassLoader());</span><br><span class=\"line\">\t\tAssert.notEmpty(configurations, &quot;No auto configuration classes found in META-INF/spring.factories. If you &quot;</span><br><span class=\"line\">\t\t\t\t+ &quot;are using a custom packaging, make sure that file is correct.&quot;);</span><br><span class=\"line\">\t\treturn configurations;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>AutoConfigurationImportSelector里的这三段代码用SpringFactoriesLoader类，加载了配置在类路径里的META-INF&#x2F;spring.factories类。</strong></p>\n<p>META-INF&#x2F;spring.factories里就是官方的starter的Configuration配置类。了解了自动装配和Enablexxx，再来手动写一个</p>\n<p>starter就信手沾来了。</p>\n<ol>\n<li>pom依赖</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.4.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.4.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"2\">\n<li>写好配置类</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloConfiguration</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> HelloService <span class=\"title function_\">getHelloService</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HelloService</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"3\">\n<li>在META-INF&#x2F;spring.factories 加上</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\</span><br><span class=\"line\">org.hello.configuration.HelloConfiguration</span><br></pre></td></tr></table></figure>\n\n<p>3个步骤即可完成一个starter。另外如果不想写META-INF&#x2F;spring.factories文件，则写一个Enable注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(ElementType.TYPE)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Inherited</span></span><br><span class=\"line\"><span class=\"meta\">@Import(HelloConfiguration.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableHello &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在spring启动入口加上该注解即可</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableHello</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BootApp</span> </span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://github.com/caiyl/cai.git\">代码链接</a></p>\n","site":{"data":{}},"excerpt":"<p><strong>Import</strong></p>\n<p>Import可以导入一个普通的bean</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PersonService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sayHello</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;hello PersonService&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<p>Import可以导入ImportSelector</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WeatherImportSelector</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ImportSelector</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;WeatherService.class.getName()&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Predicate&lt;String&gt; <span class=\"title function_\">getExclusionFilter</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ImportSelector.<span class=\"built_in\">super</span>.getExclusionFilter();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Import可以导入Configuration</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.third.configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.third.service.LoginService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> chase</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2023/3/6 4:56 PM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LoginConfiguration</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> LoginService <span class=\"title function_\">getLoginService</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LoginService</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>ImportSelector</p>\n<p>ImportSelector可以导入多个bean</p>\n<p>Configuration</p>\n<p>Configuration是bean的配置文件</p>\n<p><strong>每个Enablexxx背后都是Import在作怪。spring boot start的几个关键点，注解EnableAutoConfiguration</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableCaching</span></span><br><span class=\"line\"><span class=\"meta\">@EnableRabbit</span></span><br><span class=\"line\"><span class=\"meta\">@EnableScheduling</span></span><br><span class=\"line\"><span class=\"meta\">@EnableApolloConfig</span></span><br><span class=\"line\"><span class=\"meta\">@EnableRedissonLock</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Import(CachingConfigurationSelector.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableCaching</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Import(RabbitListenerConfigurationSelector.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableRabbit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Import(SchedulingConfiguration.class)</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableScheduling</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Import(&#123;ApolloConfigRegistrar.class&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableApolloConfig</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Import(&#123;RedissonDistributedLockAutoConfiguration.class&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableRedissonLock</span><br></pre></td></tr></table></figure>\n\n<p>由此可见，spring的Enablexxx背后都是Import。</p>\n<p><strong>springboot的自动装配</strong></p>\n<p>听起来很高端，实际上也是Enablexxx与Import在起作用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Inherited</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableAutoConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan(</span></span><br><span class=\"line\"><span class=\"meta\">    excludeFilters = &#123;@Filter(</span></span><br><span class=\"line\"><span class=\"meta\">    type = FilterType.CUSTOM,</span></span><br><span class=\"line\"><span class=\"meta\">    classes = &#123;TypeExcludeFilter.class&#125;</span></span><br><span class=\"line\"><span class=\"meta\">), @Filter(</span></span><br><span class=\"line\"><span class=\"meta\">    type = FilterType.CUSTOM,</span></span><br><span class=\"line\"><span class=\"meta\">    classes = &#123;AutoConfigurationExcludeFilter.class&#125;</span></span><br><span class=\"line\"><span class=\"meta\">)&#125;</span></span><br><span class=\"line\"><span class=\"meta\">)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> SpringBootApplication </span><br></pre></td></tr></table></figure>\n\n<p>@SpringBootApplication注解是一个组合注解，有EnableAutoConfiguration何SpringBootConfiguration注解。</p>\n<p>EnableAutoConfiguration</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Import(&#123;AutoConfigurationImportSelector.class&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableAutoConfiguration</span><br></pre></td></tr></table></figure>\n\n<p><strong>自动装配也不过是Enablexxx+Import</strong></p>\n<p>AutoConfigurationImportSelector的部分代码如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">\tpublic String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class=\"line\">\t\tif (!isEnabled(annotationMetadata)) &#123;</span><br><span class=\"line\">\t\t\treturn NO_IMPORTS;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tAutoConfigurationEntry autoConfigurationEntry = getAutoConfigurationEntry(annotationMetadata);</span><br><span class=\"line\">\t\treturn StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tprotected AutoConfigurationEntry getAutoConfigurationEntry(AnnotationMetadata annotationMetadata) &#123;</span><br><span class=\"line\">\t\tif (!isEnabled(annotationMetadata)) &#123;</span><br><span class=\"line\">\t\t\treturn EMPTY_ENTRY;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tAnnotationAttributes attributes = getAttributes(annotationMetadata);</span><br><span class=\"line\">\t\tList&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes);</span><br><span class=\"line\">\t\tconfigurations = removeDuplicates(configurations);</span><br><span class=\"line\">\t\tSet&lt;String&gt; exclusions = getExclusions(annotationMetadata, attributes);</span><br><span class=\"line\">\t\tcheckExcludedClasses(configurations, exclusions);</span><br><span class=\"line\">\t\tconfigurations.removeAll(exclusions);</span><br><span class=\"line\">\t\tconfigurations = getConfigurationClassFilter().filter(configurations);</span><br><span class=\"line\">\t\tfireAutoConfigurationImportEvents(configurations, exclusions);</span><br><span class=\"line\">\t\treturn new AutoConfigurationEntry(configurations, exclusions);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tprotected List&lt;String&gt; getCandidateConfigurations(AnnotationMetadata metadata, AnnotationAttributes attributes) &#123;</span><br><span class=\"line\">\t\tList&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(),</span><br><span class=\"line\">\t\t\t\tgetBeanClassLoader());</span><br><span class=\"line\">\t\tAssert.notEmpty(configurations, &quot;No auto configuration classes found in META-INF/spring.factories. If you &quot;</span><br><span class=\"line\">\t\t\t\t+ &quot;are using a custom packaging, make sure that file is correct.&quot;);</span><br><span class=\"line\">\t\treturn configurations;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>AutoConfigurationImportSelector里的这三段代码用SpringFactoriesLoader类，加载了配置在类路径里的META-INF&#x2F;spring.factories类。</strong></p>\n<p>META-INF&#x2F;spring.factories里就是官方的starter的Configuration配置类。了解了自动装配和Enablexxx，再来手动写一个</p>\n<p>starter就信手沾来了。</p>\n<ol>\n<li>pom依赖</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.4.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.4.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"2\">\n<li>写好配置类</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloConfiguration</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> HelloService <span class=\"title function_\">getHelloService</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HelloService</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"3\">\n<li>在META-INF&#x2F;spring.factories 加上</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\</span><br><span class=\"line\">org.hello.configuration.HelloConfiguration</span><br></pre></td></tr></table></figure>\n\n<p>3个步骤即可完成一个starter。另外如果不想写META-INF&#x2F;spring.factories文件，则写一个Enable注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(ElementType.TYPE)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Inherited</span></span><br><span class=\"line\"><span class=\"meta\">@Import(HelloConfiguration.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableHello &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在spring启动入口加上该注解即可</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableHello</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BootApp</span> </span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://github.com/caiyl/cai.git\">代码链接</a></p>"},{"title":"循环依赖","date":"2017-03-29T02:18:27.000Z","_content":"\n关于循环依赖先说几个点总结\n\n1. 依赖三级缓存以及**提前暴露引用**\n2. 循环依赖只能是单例的，如果是多例则会报错，多例循环依赖本身就是错误的，无法确定依赖那一个实例\n3. 构造器注入的循环依赖无法处理，会报错","source":"_posts/循环依赖.md","raw":"---\ntitle: 循环依赖\ndate: 2017-03-29 10:18:27\ntags: spring\n---\n\n关于循环依赖先说几个点总结\n\n1. 依赖三级缓存以及**提前暴露引用**\n2. 循环依赖只能是单例的，如果是多例则会报错，多例循环依赖本身就是错误的，无法确定依赖那一个实例\n3. 构造器注入的循环依赖无法处理，会报错","slug":"循环依赖","published":1,"updated":"2023-06-30T07:19:10.812Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllywfmpg0009bytoeoa74arz","content":"<p>关于循环依赖先说几个点总结</p>\n<ol>\n<li>依赖三级缓存以及<strong>提前暴露引用</strong></li>\n<li>循环依赖只能是单例的，如果是多例则会报错，多例循环依赖本身就是错误的，无法确定依赖那一个实例</li>\n<li>构造器注入的循环依赖无法处理，会报错</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>关于循环依赖先说几个点总结</p>\n<ol>\n<li>依赖三级缓存以及<strong>提前暴露引用</strong></li>\n<li>循环依赖只能是单例的，如果是多例则会报错，多例循环依赖本身就是错误的，无法确定依赖那一个实例</li>\n<li>构造器注入的循环依赖无法处理，会报错</li>\n</ol>\n"},{"title":"池化技术导致cpu占用飙高问题分析","date":"2023-08-31T03:29:41.000Z","_content":"\n# 背景：\n\n某天其他部门的同事说，我负责的某个服务cpu占用很高，影响到他们的应用。我在想服务不是部署在容器里吗，不是资源隔离的吗，找了运维同事说，cpu确实没用限制。好吧，只能去分析原因了，否则影响到公司其他赚钱的业务系统就麻烦，处于责任心，和对技术的追求，决定还是处理一下。\n\n思路，根据经验，老夫信心满满，内存问题，泄露，溢出，首先是dump出来，Memory Analyzer Tool工具分析。cpu问题，看线程，死循环，100%cpu？大题思路是没有变的，开始表演。\n\n第一步，当然是找运维大佬，jstack pid 导出线程栈信息。然后top -H -p <pid> 查看线程那些线程占用高的。线程栈信息文件到手，top -H -p <pid>信息截图如下\n\n![线程占用情况](池化技术导致cpu占用飙高问题分析/线程占用情况.png)\n\n看到这个图，心中万马奔腾，怎么和自己想的不一样，不是有线程名称吗，也没有cpu占用特别高的线程啊，怎么办呢。\n\n再仔细观察图，发现总共有561个线程，只有8个是running,553个是sleep状态。这里就十分奇怪了。到导出的线程栈文件看看那些线程是sleeping吧，没发现太多的线程sleeping，但是发现了很多是TIMED_WAITING状态，如下图\n\n![线程占用情况](池化技术导致cpu占用飙高问题分析/阻塞.jpg)\n\n仔细看发现是httpclient导致线程阻塞，突然想到项目中有大量的数据同步请求，是使用httpclient连接池实现的。问题就处在连接池身上。去看看连接池的配置\n\n```java\n\tprivate static int defaultMaxConnection = 50;\n\n\t/**\n\t * \n\t */\n\tprivate static PoolingHttpClientConnectionManager cm = new PoolingHttpClientConnectionManager();\n\n\tstatic {\n\t\tcm.setMaxTotal(100);\n\t\tcm.setDefaultMaxPerRoute(defaultMaxConnection);\n\t}\n\n\tpublic static CloseableHttpClient getHttpClient() {\n\n\t\treturn HttpClients.custom().setConnectionManager(cm).build();\n\n\t}\n```\n\n最大100个并发，单个通道最大是50。。。。。。仔细想想业务中，有好几百个线程在不断地进行上游数据同步。线程获取不到httpclient链接，各个线程都在竞争获取链接，导致线程阻塞。根据实际情况修改成300个。\n\n# 模拟验证\n\n首先需要模拟一个上游http服务，这里使用interfake模拟。\n\n安装 npm install interfake -g\n\n创建文件，内容如下\n\n```\n[\n    {\n        \"request\": {\n            \"url\": \"/hello\",\n            \"method\": \"get\"\n        },\n        \"response\": {\n            \"code\": 200,\n            \"delay\":200,\n            \"body\": {\n                \"say\": \"hello world!\"\n            }\n        }\n    },\n    {\n        \"request\": {\n            \"url\": \"/hello2\",\n            \"method\": \"post\"\n        },\n        \"response\": {\n            \"code\": 200,\n            \"delay\": 100,\n            \"body\": {\n                \"theTime\": \"Adventure Time!\"\n            }\n        }\n    }\n]\n```\n\n然后启动 ：interfake -p 3001 --file ./adventuretime.json\n\nget访问 http://localhost:3001/hello， 模拟延时200\n\n返回\n\n```\n{\n    \"say\": \"hello world!\"\n}\n```\n\n\n\n测试代码\n\n```\npackage com.util;\n\n\nimport org.apache.http.HttpStatus;\nimport org.apache.http.client.config.RequestConfig;\nimport org.apache.http.client.methods.CloseableHttpResponse;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClients;\nimport org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\nimport org.apache.http.util.EntityUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class HttpClientUtils {\n\n\tprivate static Logger logger = LoggerFactory.getLogger(HttpClientUtils.class);\n\tprivate static int defaultConnectionTimeout = 60000;\n\tprivate static int defaultSoTimeout = 60000;\n\tprivate static int defaultMaxConnection = 50;\n\tprivate static PoolingHttpClientConnectionManager cm = new PoolingHttpClientConnectionManager();\n\n\tstatic {\n\t\tcm.setMaxTotal(100);\n\t\tcm.setDefaultMaxPerRoute(defaultMaxConnection);\n\t}\n\n\tpublic static CloseableHttpClient getHttpClient() {\n\n\t\treturn HttpClients.custom().setConnectionManager(cm).build();\n\n\t}\n\n\tpublic static String doGet(String url, Map<String, String> headers) {\n\n\t\tlong startTime = System.currentTimeMillis();\n\n\t\tHttpGet httppost = null;\n\n\t\ttry {\n\n\t\t\tCloseableHttpClient httpclient = getHttpClient();\n\n\t\t\thttppost = new HttpGet(url);\n\t\t\thttppost.setConfig(RequestConfig.custom().setConnectionRequestTimeout(defaultConnectionTimeout)\n\t\t\t\t\t.setConnectTimeout(defaultConnectionTimeout).setSocketTimeout(defaultSoTimeout).build());\n\n\t\t\tif (headers != null && headers.size() > 0) {\n\t\t\t\tfor (Map.Entry<String, String> entry : headers.entrySet()) {\n\t\t\t\t\thttppost.addHeader(entry.getKey(), entry.getValue());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tCloseableHttpResponse response = httpclient.execute(httppost);\n\n\t\t\tint statusCode = response.getStatusLine().getStatusCode();\n\n\t\t\tif (statusCode == HttpStatus.SC_OK) {\n\t\t\t\treturn EntityUtils.toString(response.getEntity(), \"GBK\");\n\t\t\t} else {\n\t\t\t\tlogger.warn(\"doPost failed: \" + EntityUtils.toString(response.getEntity()));\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\tlogger.error(\"url:{},\",url,e);\n\t\t} finally {\n\t\t\tif (httppost != null) {\n\t\t\t\thttppost.releaseConnection();\n\t\t\t}\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\"execute:{},used time:{}ms \" ,url,(System.currentTimeMillis() - startTime));\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0; i < 300; i++) {\n\t\t\tThread thread = new Thread(new Runnable() {\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\twhile (true){\n\t\t\t\t\t\tString s = HttpClientUtils.doGet(\"http://localhost:3001/hello\", new HashMap<>());\n\t\t\t\t\t\tSystem.out.println(s+new Date());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tthread.setName(\"requestThread\"+i);\n\t\t\tthread.start();\n\t\t}\n\t}\n\n\n\n\n}\n\n```\n\n线程统计\n\n![线程统计](池化技术导致cpu占用飙高问题分析/线程统计.jpg)\n\n修改连接池配置 *defaultMaxConnection* 为 200 和 *cm*.setMaxTotal(200);\n\n再重新测试观察如下图\n\n![线程统计2](池化技术导致cpu占用飙高问题分析/线程统计2.jpg)\n\n由此可以得出结论，合理配置httpclient连接数很重要。\n\n最后分析一下，在本次排查问题中学到的一些知识，由于本次的线程都是有spring rabbitmq的消费监听创建的，其实这些消费线程是使用线程池处理的，这些线程池已经做了自动缩容，扩容处理，一般不建议另外新旧线程消费处理。具体代码可以去看SimpleMessageListenerContainer类的considerStoppingAConsumer方法和adjustConsumers方法。\n\n# 另外分析一个线程在线分析网站\n\n [java线程分析网站](https://fastthread.io/)\n\n![线程分析1](池化技术导致cpu占用飙高问题分析/线程分析1.jpg)\n\n![线程分析2](池化技术导致cpu占用飙高问题分析/线程分析2.jpg)\n","source":"_posts/池化技术导致cpu占用飙高问题分析.md","raw":"---\ntitle: 池化技术导致cpu占用飙高问题分析\ndate: 2023-08-31 11:29:41\ntags:\n---\n\n# 背景：\n\n某天其他部门的同事说，我负责的某个服务cpu占用很高，影响到他们的应用。我在想服务不是部署在容器里吗，不是资源隔离的吗，找了运维同事说，cpu确实没用限制。好吧，只能去分析原因了，否则影响到公司其他赚钱的业务系统就麻烦，处于责任心，和对技术的追求，决定还是处理一下。\n\n思路，根据经验，老夫信心满满，内存问题，泄露，溢出，首先是dump出来，Memory Analyzer Tool工具分析。cpu问题，看线程，死循环，100%cpu？大题思路是没有变的，开始表演。\n\n第一步，当然是找运维大佬，jstack pid 导出线程栈信息。然后top -H -p <pid> 查看线程那些线程占用高的。线程栈信息文件到手，top -H -p <pid>信息截图如下\n\n![线程占用情况](池化技术导致cpu占用飙高问题分析/线程占用情况.png)\n\n看到这个图，心中万马奔腾，怎么和自己想的不一样，不是有线程名称吗，也没有cpu占用特别高的线程啊，怎么办呢。\n\n再仔细观察图，发现总共有561个线程，只有8个是running,553个是sleep状态。这里就十分奇怪了。到导出的线程栈文件看看那些线程是sleeping吧，没发现太多的线程sleeping，但是发现了很多是TIMED_WAITING状态，如下图\n\n![线程占用情况](池化技术导致cpu占用飙高问题分析/阻塞.jpg)\n\n仔细看发现是httpclient导致线程阻塞，突然想到项目中有大量的数据同步请求，是使用httpclient连接池实现的。问题就处在连接池身上。去看看连接池的配置\n\n```java\n\tprivate static int defaultMaxConnection = 50;\n\n\t/**\n\t * \n\t */\n\tprivate static PoolingHttpClientConnectionManager cm = new PoolingHttpClientConnectionManager();\n\n\tstatic {\n\t\tcm.setMaxTotal(100);\n\t\tcm.setDefaultMaxPerRoute(defaultMaxConnection);\n\t}\n\n\tpublic static CloseableHttpClient getHttpClient() {\n\n\t\treturn HttpClients.custom().setConnectionManager(cm).build();\n\n\t}\n```\n\n最大100个并发，单个通道最大是50。。。。。。仔细想想业务中，有好几百个线程在不断地进行上游数据同步。线程获取不到httpclient链接，各个线程都在竞争获取链接，导致线程阻塞。根据实际情况修改成300个。\n\n# 模拟验证\n\n首先需要模拟一个上游http服务，这里使用interfake模拟。\n\n安装 npm install interfake -g\n\n创建文件，内容如下\n\n```\n[\n    {\n        \"request\": {\n            \"url\": \"/hello\",\n            \"method\": \"get\"\n        },\n        \"response\": {\n            \"code\": 200,\n            \"delay\":200,\n            \"body\": {\n                \"say\": \"hello world!\"\n            }\n        }\n    },\n    {\n        \"request\": {\n            \"url\": \"/hello2\",\n            \"method\": \"post\"\n        },\n        \"response\": {\n            \"code\": 200,\n            \"delay\": 100,\n            \"body\": {\n                \"theTime\": \"Adventure Time!\"\n            }\n        }\n    }\n]\n```\n\n然后启动 ：interfake -p 3001 --file ./adventuretime.json\n\nget访问 http://localhost:3001/hello， 模拟延时200\n\n返回\n\n```\n{\n    \"say\": \"hello world!\"\n}\n```\n\n\n\n测试代码\n\n```\npackage com.util;\n\n\nimport org.apache.http.HttpStatus;\nimport org.apache.http.client.config.RequestConfig;\nimport org.apache.http.client.methods.CloseableHttpResponse;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClients;\nimport org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\nimport org.apache.http.util.EntityUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class HttpClientUtils {\n\n\tprivate static Logger logger = LoggerFactory.getLogger(HttpClientUtils.class);\n\tprivate static int defaultConnectionTimeout = 60000;\n\tprivate static int defaultSoTimeout = 60000;\n\tprivate static int defaultMaxConnection = 50;\n\tprivate static PoolingHttpClientConnectionManager cm = new PoolingHttpClientConnectionManager();\n\n\tstatic {\n\t\tcm.setMaxTotal(100);\n\t\tcm.setDefaultMaxPerRoute(defaultMaxConnection);\n\t}\n\n\tpublic static CloseableHttpClient getHttpClient() {\n\n\t\treturn HttpClients.custom().setConnectionManager(cm).build();\n\n\t}\n\n\tpublic static String doGet(String url, Map<String, String> headers) {\n\n\t\tlong startTime = System.currentTimeMillis();\n\n\t\tHttpGet httppost = null;\n\n\t\ttry {\n\n\t\t\tCloseableHttpClient httpclient = getHttpClient();\n\n\t\t\thttppost = new HttpGet(url);\n\t\t\thttppost.setConfig(RequestConfig.custom().setConnectionRequestTimeout(defaultConnectionTimeout)\n\t\t\t\t\t.setConnectTimeout(defaultConnectionTimeout).setSocketTimeout(defaultSoTimeout).build());\n\n\t\t\tif (headers != null && headers.size() > 0) {\n\t\t\t\tfor (Map.Entry<String, String> entry : headers.entrySet()) {\n\t\t\t\t\thttppost.addHeader(entry.getKey(), entry.getValue());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tCloseableHttpResponse response = httpclient.execute(httppost);\n\n\t\t\tint statusCode = response.getStatusLine().getStatusCode();\n\n\t\t\tif (statusCode == HttpStatus.SC_OK) {\n\t\t\t\treturn EntityUtils.toString(response.getEntity(), \"GBK\");\n\t\t\t} else {\n\t\t\t\tlogger.warn(\"doPost failed: \" + EntityUtils.toString(response.getEntity()));\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\tlogger.error(\"url:{},\",url,e);\n\t\t} finally {\n\t\t\tif (httppost != null) {\n\t\t\t\thttppost.releaseConnection();\n\t\t\t}\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\"execute:{},used time:{}ms \" ,url,(System.currentTimeMillis() - startTime));\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0; i < 300; i++) {\n\t\t\tThread thread = new Thread(new Runnable() {\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\twhile (true){\n\t\t\t\t\t\tString s = HttpClientUtils.doGet(\"http://localhost:3001/hello\", new HashMap<>());\n\t\t\t\t\t\tSystem.out.println(s+new Date());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tthread.setName(\"requestThread\"+i);\n\t\t\tthread.start();\n\t\t}\n\t}\n\n\n\n\n}\n\n```\n\n线程统计\n\n![线程统计](池化技术导致cpu占用飙高问题分析/线程统计.jpg)\n\n修改连接池配置 *defaultMaxConnection* 为 200 和 *cm*.setMaxTotal(200);\n\n再重新测试观察如下图\n\n![线程统计2](池化技术导致cpu占用飙高问题分析/线程统计2.jpg)\n\n由此可以得出结论，合理配置httpclient连接数很重要。\n\n最后分析一下，在本次排查问题中学到的一些知识，由于本次的线程都是有spring rabbitmq的消费监听创建的，其实这些消费线程是使用线程池处理的，这些线程池已经做了自动缩容，扩容处理，一般不建议另外新旧线程消费处理。具体代码可以去看SimpleMessageListenerContainer类的considerStoppingAConsumer方法和adjustConsumers方法。\n\n# 另外分析一个线程在线分析网站\n\n [java线程分析网站](https://fastthread.io/)\n\n![线程分析1](池化技术导致cpu占用飙高问题分析/线程分析1.jpg)\n\n![线程分析2](池化技术导致cpu占用飙高问题分析/线程分析2.jpg)\n","slug":"池化技术导致cpu占用飙高问题分析","published":1,"updated":"2023-08-31T08:21:52.859Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllywfmph000abyto13jp0kb9","content":"<h1 id=\"背景：\"><a href=\"#背景：\" class=\"headerlink\" title=\"背景：\"></a>背景：</h1><p>某天其他部门的同事说，我负责的某个服务cpu占用很高，影响到他们的应用。我在想服务不是部署在容器里吗，不是资源隔离的吗，找了运维同事说，cpu确实没用限制。好吧，只能去分析原因了，否则影响到公司其他赚钱的业务系统就麻烦，处于责任心，和对技术的追求，决定还是处理一下。</p>\n<p>思路，根据经验，老夫信心满满，内存问题，泄露，溢出，首先是dump出来，Memory Analyzer Tool工具分析。cpu问题，看线程，死循环，100%cpu？大题思路是没有变的，开始表演。</p>\n<p>第一步，当然是找运维大佬，jstack pid 导出线程栈信息。然后top -H -p <pid> 查看线程那些线程占用高的。线程栈信息文件到手，top -H -p <pid>信息截图如下</pid></pid></p>\n<img src=\"/2023/08/31/%E6%B1%A0%E5%8C%96%E6%8A%80%E6%9C%AF%E5%AF%BC%E8%87%B4cpu%E5%8D%A0%E7%94%A8%E9%A3%99%E9%AB%98%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/08/31/%E6%B1%A0%E5%8C%96%E6%8A%80%E6%9C%AF%E5%AF%BC%E8%87%B4cpu%E5%8D%A0%E7%94%A8%E9%A3%99%E9%AB%98%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/%E7%BA%BF%E7%A8%8B%E5%8D%A0%E7%94%A8%E6%83%85%E5%86%B5.png\" class title=\"线程占用情况\">\n\n<p>看到这个图，心中万马奔腾，怎么和自己想的不一样，不是有线程名称吗，也没有cpu占用特别高的线程啊，怎么办呢。</p>\n<p>再仔细观察图，发现总共有561个线程，只有8个是running,553个是sleep状态。这里就十分奇怪了。到导出的线程栈文件看看那些线程是sleeping吧，没发现太多的线程sleeping，但是发现了很多是TIMED_WAITING状态，如下图</p>\n<img src=\"/2023/08/31/%E6%B1%A0%E5%8C%96%E6%8A%80%E6%9C%AF%E5%AF%BC%E8%87%B4cpu%E5%8D%A0%E7%94%A8%E9%A3%99%E9%AB%98%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/08/31/%E6%B1%A0%E5%8C%96%E6%8A%80%E6%9C%AF%E5%AF%BC%E8%87%B4cpu%E5%8D%A0%E7%94%A8%E9%A3%99%E9%AB%98%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/%E9%98%BB%E5%A1%9E.jpg\" class title=\"线程占用情况\">\n\n<p>仔细看发现是httpclient导致线程阻塞，突然想到项目中有大量的数据同步请求，是使用httpclient连接池实现的。问题就处在连接池身上。去看看连接池的配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">defaultMaxConnection</span> <span class=\"operator\">=</span> <span class=\"number\">50</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">PoolingHttpClientConnectionManager</span> <span class=\"variable\">cm</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PoolingHttpClientConnectionManager</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">\tcm.setMaxTotal(<span class=\"number\">100</span>);</span><br><span class=\"line\">\tcm.setDefaultMaxPerRoute(defaultMaxConnection);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> CloseableHttpClient <span class=\"title function_\">getHttpClient</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> HttpClients.custom().setConnectionManager(cm).build();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最大100个并发，单个通道最大是50。。。。。。仔细想想业务中，有好几百个线程在不断地进行上游数据同步。线程获取不到httpclient链接，各个线程都在竞争获取链接，导致线程阻塞。根据实际情况修改成300个。</p>\n<h1 id=\"模拟验证\"><a href=\"#模拟验证\" class=\"headerlink\" title=\"模拟验证\"></a>模拟验证</h1><p>首先需要模拟一个上游http服务，这里使用interfake模拟。</p>\n<p>安装 npm install interfake -g</p>\n<p>创建文件，内容如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &quot;request&quot;: &#123;</span><br><span class=\"line\">            &quot;url&quot;: &quot;/hello&quot;,</span><br><span class=\"line\">            &quot;method&quot;: &quot;get&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;response&quot;: &#123;</span><br><span class=\"line\">            &quot;code&quot;: 200,</span><br><span class=\"line\">            &quot;delay&quot;:200,</span><br><span class=\"line\">            &quot;body&quot;: &#123;</span><br><span class=\"line\">                &quot;say&quot;: &quot;hello world!&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &quot;request&quot;: &#123;</span><br><span class=\"line\">            &quot;url&quot;: &quot;/hello2&quot;,</span><br><span class=\"line\">            &quot;method&quot;: &quot;post&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;response&quot;: &#123;</span><br><span class=\"line\">            &quot;code&quot;: 200,</span><br><span class=\"line\">            &quot;delay&quot;: 100,</span><br><span class=\"line\">            &quot;body&quot;: &#123;</span><br><span class=\"line\">                &quot;theTime&quot;: &quot;Adventure Time!&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>然后启动 ：interfake -p 3001 –file .&#x2F;adventuretime.json</p>\n<p>get访问 <a href=\"http://localhost:3001/hello%EF%BC%8C\">http://localhost:3001/hello，</a> 模拟延时200</p>\n<p>返回</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;say&quot;: &quot;hello world!&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>测试代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.util;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">import org.apache.http.HttpStatus;</span><br><span class=\"line\">import org.apache.http.client.config.RequestConfig;</span><br><span class=\"line\">import org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class=\"line\">import org.apache.http.client.methods.HttpGet;</span><br><span class=\"line\">import org.apache.http.impl.client.CloseableHttpClient;</span><br><span class=\"line\">import org.apache.http.impl.client.HttpClients;</span><br><span class=\"line\">import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;</span><br><span class=\"line\">import org.apache.http.util.EntityUtils;</span><br><span class=\"line\">import org.slf4j.Logger;</span><br><span class=\"line\">import org.slf4j.LoggerFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.Date;</span><br><span class=\"line\">import java.util.HashMap;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\">public class HttpClientUtils &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate static Logger logger = LoggerFactory.getLogger(HttpClientUtils.class);</span><br><span class=\"line\">\tprivate static int defaultConnectionTimeout = 60000;</span><br><span class=\"line\">\tprivate static int defaultSoTimeout = 60000;</span><br><span class=\"line\">\tprivate static int defaultMaxConnection = 50;</span><br><span class=\"line\">\tprivate static PoolingHttpClientConnectionManager cm = new PoolingHttpClientConnectionManager();</span><br><span class=\"line\"></span><br><span class=\"line\">\tstatic &#123;</span><br><span class=\"line\">\t\tcm.setMaxTotal(100);</span><br><span class=\"line\">\t\tcm.setDefaultMaxPerRoute(defaultMaxConnection);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static CloseableHttpClient getHttpClient() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn HttpClients.custom().setConnectionManager(cm).build();</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static String doGet(String url, Map&lt;String, String&gt; headers) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tlong startTime = System.currentTimeMillis();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tHttpGet httppost = null;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tCloseableHttpClient httpclient = getHttpClient();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\thttppost = new HttpGet(url);</span><br><span class=\"line\">\t\t\thttppost.setConfig(RequestConfig.custom().setConnectionRequestTimeout(defaultConnectionTimeout)</span><br><span class=\"line\">\t\t\t\t\t.setConnectTimeout(defaultConnectionTimeout).setSocketTimeout(defaultSoTimeout).build());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tif (headers != null &amp;&amp; headers.size() &gt; 0) &#123;</span><br><span class=\"line\">\t\t\t\tfor (Map.Entry&lt;String, String&gt; entry : headers.entrySet()) &#123;</span><br><span class=\"line\">\t\t\t\t\thttppost.addHeader(entry.getKey(), entry.getValue());</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tCloseableHttpResponse response = httpclient.execute(httppost);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tint statusCode = response.getStatusLine().getStatusCode();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tif (statusCode == HttpStatus.SC_OK) &#123;</span><br><span class=\"line\">\t\t\t\treturn EntityUtils.toString(response.getEntity(), &quot;GBK&quot;);</span><br><span class=\"line\">\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\tlogger.warn(&quot;doPost failed: &quot; + EntityUtils.toString(response.getEntity()));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125; catch (Exception e) &#123;</span><br><span class=\"line\">\t\t\tlogger.error(&quot;url:&#123;&#125;,&quot;,url,e);</span><br><span class=\"line\">\t\t&#125; finally &#123;</span><br><span class=\"line\">\t\t\tif (httppost != null) &#123;</span><br><span class=\"line\">\t\t\t\thttppost.releaseConnection();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tif (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\tlogger.debug(&quot;execute:&#123;&#125;,used time:&#123;&#125;ms &quot; ,url,(System.currentTimeMillis() - startTime));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn null;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; 300; i++) &#123;</span><br><span class=\"line\">\t\t\tThread thread = new Thread(new Runnable() &#123;</span><br><span class=\"line\">\t\t\t\t@Override</span><br><span class=\"line\">\t\t\t\tpublic void run() &#123;</span><br><span class=\"line\">\t\t\t\t\twhile (true)&#123;</span><br><span class=\"line\">\t\t\t\t\t\tString s = HttpClientUtils.doGet(&quot;http://localhost:3001/hello&quot;, new HashMap&lt;&gt;());</span><br><span class=\"line\">\t\t\t\t\t\tSystem.out.println(s+new Date());</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t\t\tthread.setName(&quot;requestThread&quot;+i);</span><br><span class=\"line\">\t\t\tthread.start();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>线程统计</p>\n<img src=\"/2023/08/31/%E6%B1%A0%E5%8C%96%E6%8A%80%E6%9C%AF%E5%AF%BC%E8%87%B4cpu%E5%8D%A0%E7%94%A8%E9%A3%99%E9%AB%98%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/08/31/%E6%B1%A0%E5%8C%96%E6%8A%80%E6%9C%AF%E5%AF%BC%E8%87%B4cpu%E5%8D%A0%E7%94%A8%E9%A3%99%E9%AB%98%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/%E7%BA%BF%E7%A8%8B%E7%BB%9F%E8%AE%A1.jpg\" class title=\"线程统计\">\n\n<p>修改连接池配置 <em>defaultMaxConnection</em> 为 200 和 <em>cm</em>.setMaxTotal(200);</p>\n<p>再重新测试观察如下图</p>\n<img src=\"/2023/08/31/%E6%B1%A0%E5%8C%96%E6%8A%80%E6%9C%AF%E5%AF%BC%E8%87%B4cpu%E5%8D%A0%E7%94%A8%E9%A3%99%E9%AB%98%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/08/31/%E6%B1%A0%E5%8C%96%E6%8A%80%E6%9C%AF%E5%AF%BC%E8%87%B4cpu%E5%8D%A0%E7%94%A8%E9%A3%99%E9%AB%98%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/%E7%BA%BF%E7%A8%8B%E7%BB%9F%E8%AE%A12.jpg\" class title=\"线程统计2\">\n\n<p>由此可以得出结论，合理配置httpclient连接数很重要。</p>\n<p>最后分析一下，在本次排查问题中学到的一些知识，由于本次的线程都是有spring rabbitmq的消费监听创建的，其实这些消费线程是使用线程池处理的，这些线程池已经做了自动缩容，扩容处理，一般不建议另外新旧线程消费处理。具体代码可以去看SimpleMessageListenerContainer类的considerStoppingAConsumer方法和adjustConsumers方法。</p>\n<h1 id=\"另外分析一个线程在线分析网站\"><a href=\"#另外分析一个线程在线分析网站\" class=\"headerlink\" title=\"另外分析一个线程在线分析网站\"></a>另外分析一个线程在线分析网站</h1><p> <a href=\"https://fastthread.io/\">java线程分析网站</a></p>\n<img src=\"/2023/08/31/%E6%B1%A0%E5%8C%96%E6%8A%80%E6%9C%AF%E5%AF%BC%E8%87%B4cpu%E5%8D%A0%E7%94%A8%E9%A3%99%E9%AB%98%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/08/31/%E6%B1%A0%E5%8C%96%E6%8A%80%E6%9C%AF%E5%AF%BC%E8%87%B4cpu%E5%8D%A0%E7%94%A8%E9%A3%99%E9%AB%98%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/%E7%BA%BF%E7%A8%8B%E5%88%86%E6%9E%901.jpg\" class title=\"线程分析1\">\n\n<img src=\"/2023/08/31/%E6%B1%A0%E5%8C%96%E6%8A%80%E6%9C%AF%E5%AF%BC%E8%87%B4cpu%E5%8D%A0%E7%94%A8%E9%A3%99%E9%AB%98%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/08/31/%E6%B1%A0%E5%8C%96%E6%8A%80%E6%9C%AF%E5%AF%BC%E8%87%B4cpu%E5%8D%A0%E7%94%A8%E9%A3%99%E9%AB%98%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/%E7%BA%BF%E7%A8%8B%E5%88%86%E6%9E%902.jpg\" class title=\"线程分析2\">\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"背景：\"><a href=\"#背景：\" class=\"headerlink\" title=\"背景：\"></a>背景：</h1><p>某天其他部门的同事说，我负责的某个服务cpu占用很高，影响到他们的应用。我在想服务不是部署在容器里吗，不是资源隔离的吗，找了运维同事说，cpu确实没用限制。好吧，只能去分析原因了，否则影响到公司其他赚钱的业务系统就麻烦，处于责任心，和对技术的追求，决定还是处理一下。</p>\n<p>思路，根据经验，老夫信心满满，内存问题，泄露，溢出，首先是dump出来，Memory Analyzer Tool工具分析。cpu问题，看线程，死循环，100%cpu？大题思路是没有变的，开始表演。</p>\n<p>第一步，当然是找运维大佬，jstack pid 导出线程栈信息。然后top -H -p <pid> 查看线程那些线程占用高的。线程栈信息文件到手，top -H -p <pid>信息截图如下</pid></pid></p>\n<img src=\"/2023/08/31/%E6%B1%A0%E5%8C%96%E6%8A%80%E6%9C%AF%E5%AF%BC%E8%87%B4cpu%E5%8D%A0%E7%94%A8%E9%A3%99%E9%AB%98%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/08/31/%E6%B1%A0%E5%8C%96%E6%8A%80%E6%9C%AF%E5%AF%BC%E8%87%B4cpu%E5%8D%A0%E7%94%A8%E9%A3%99%E9%AB%98%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/%E7%BA%BF%E7%A8%8B%E5%8D%A0%E7%94%A8%E6%83%85%E5%86%B5.png\" class title=\"线程占用情况\">\n\n<p>看到这个图，心中万马奔腾，怎么和自己想的不一样，不是有线程名称吗，也没有cpu占用特别高的线程啊，怎么办呢。</p>\n<p>再仔细观察图，发现总共有561个线程，只有8个是running,553个是sleep状态。这里就十分奇怪了。到导出的线程栈文件看看那些线程是sleeping吧，没发现太多的线程sleeping，但是发现了很多是TIMED_WAITING状态，如下图</p>\n<img src=\"/2023/08/31/%E6%B1%A0%E5%8C%96%E6%8A%80%E6%9C%AF%E5%AF%BC%E8%87%B4cpu%E5%8D%A0%E7%94%A8%E9%A3%99%E9%AB%98%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/08/31/%E6%B1%A0%E5%8C%96%E6%8A%80%E6%9C%AF%E5%AF%BC%E8%87%B4cpu%E5%8D%A0%E7%94%A8%E9%A3%99%E9%AB%98%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/%E9%98%BB%E5%A1%9E.jpg\" class title=\"线程占用情况\">\n\n<p>仔细看发现是httpclient导致线程阻塞，突然想到项目中有大量的数据同步请求，是使用httpclient连接池实现的。问题就处在连接池身上。去看看连接池的配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">defaultMaxConnection</span> <span class=\"operator\">=</span> <span class=\"number\">50</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">PoolingHttpClientConnectionManager</span> <span class=\"variable\">cm</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PoolingHttpClientConnectionManager</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">\tcm.setMaxTotal(<span class=\"number\">100</span>);</span><br><span class=\"line\">\tcm.setDefaultMaxPerRoute(defaultMaxConnection);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> CloseableHttpClient <span class=\"title function_\">getHttpClient</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> HttpClients.custom().setConnectionManager(cm).build();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最大100个并发，单个通道最大是50。。。。。。仔细想想业务中，有好几百个线程在不断地进行上游数据同步。线程获取不到httpclient链接，各个线程都在竞争获取链接，导致线程阻塞。根据实际情况修改成300个。</p>\n<h1 id=\"模拟验证\"><a href=\"#模拟验证\" class=\"headerlink\" title=\"模拟验证\"></a>模拟验证</h1><p>首先需要模拟一个上游http服务，这里使用interfake模拟。</p>\n<p>安装 npm install interfake -g</p>\n<p>创建文件，内容如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &quot;request&quot;: &#123;</span><br><span class=\"line\">            &quot;url&quot;: &quot;/hello&quot;,</span><br><span class=\"line\">            &quot;method&quot;: &quot;get&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;response&quot;: &#123;</span><br><span class=\"line\">            &quot;code&quot;: 200,</span><br><span class=\"line\">            &quot;delay&quot;:200,</span><br><span class=\"line\">            &quot;body&quot;: &#123;</span><br><span class=\"line\">                &quot;say&quot;: &quot;hello world!&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &quot;request&quot;: &#123;</span><br><span class=\"line\">            &quot;url&quot;: &quot;/hello2&quot;,</span><br><span class=\"line\">            &quot;method&quot;: &quot;post&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;response&quot;: &#123;</span><br><span class=\"line\">            &quot;code&quot;: 200,</span><br><span class=\"line\">            &quot;delay&quot;: 100,</span><br><span class=\"line\">            &quot;body&quot;: &#123;</span><br><span class=\"line\">                &quot;theTime&quot;: &quot;Adventure Time!&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>然后启动 ：interfake -p 3001 –file .&#x2F;adventuretime.json</p>\n<p>get访问 <a href=\"http://localhost:3001/hello%EF%BC%8C\">http://localhost:3001/hello，</a> 模拟延时200</p>\n<p>返回</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;say&quot;: &quot;hello world!&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>测试代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.util;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">import org.apache.http.HttpStatus;</span><br><span class=\"line\">import org.apache.http.client.config.RequestConfig;</span><br><span class=\"line\">import org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class=\"line\">import org.apache.http.client.methods.HttpGet;</span><br><span class=\"line\">import org.apache.http.impl.client.CloseableHttpClient;</span><br><span class=\"line\">import org.apache.http.impl.client.HttpClients;</span><br><span class=\"line\">import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;</span><br><span class=\"line\">import org.apache.http.util.EntityUtils;</span><br><span class=\"line\">import org.slf4j.Logger;</span><br><span class=\"line\">import org.slf4j.LoggerFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.Date;</span><br><span class=\"line\">import java.util.HashMap;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\">public class HttpClientUtils &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate static Logger logger = LoggerFactory.getLogger(HttpClientUtils.class);</span><br><span class=\"line\">\tprivate static int defaultConnectionTimeout = 60000;</span><br><span class=\"line\">\tprivate static int defaultSoTimeout = 60000;</span><br><span class=\"line\">\tprivate static int defaultMaxConnection = 50;</span><br><span class=\"line\">\tprivate static PoolingHttpClientConnectionManager cm = new PoolingHttpClientConnectionManager();</span><br><span class=\"line\"></span><br><span class=\"line\">\tstatic &#123;</span><br><span class=\"line\">\t\tcm.setMaxTotal(100);</span><br><span class=\"line\">\t\tcm.setDefaultMaxPerRoute(defaultMaxConnection);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static CloseableHttpClient getHttpClient() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn HttpClients.custom().setConnectionManager(cm).build();</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static String doGet(String url, Map&lt;String, String&gt; headers) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tlong startTime = System.currentTimeMillis();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tHttpGet httppost = null;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tCloseableHttpClient httpclient = getHttpClient();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\thttppost = new HttpGet(url);</span><br><span class=\"line\">\t\t\thttppost.setConfig(RequestConfig.custom().setConnectionRequestTimeout(defaultConnectionTimeout)</span><br><span class=\"line\">\t\t\t\t\t.setConnectTimeout(defaultConnectionTimeout).setSocketTimeout(defaultSoTimeout).build());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tif (headers != null &amp;&amp; headers.size() &gt; 0) &#123;</span><br><span class=\"line\">\t\t\t\tfor (Map.Entry&lt;String, String&gt; entry : headers.entrySet()) &#123;</span><br><span class=\"line\">\t\t\t\t\thttppost.addHeader(entry.getKey(), entry.getValue());</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tCloseableHttpResponse response = httpclient.execute(httppost);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tint statusCode = response.getStatusLine().getStatusCode();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tif (statusCode == HttpStatus.SC_OK) &#123;</span><br><span class=\"line\">\t\t\t\treturn EntityUtils.toString(response.getEntity(), &quot;GBK&quot;);</span><br><span class=\"line\">\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\tlogger.warn(&quot;doPost failed: &quot; + EntityUtils.toString(response.getEntity()));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125; catch (Exception e) &#123;</span><br><span class=\"line\">\t\t\tlogger.error(&quot;url:&#123;&#125;,&quot;,url,e);</span><br><span class=\"line\">\t\t&#125; finally &#123;</span><br><span class=\"line\">\t\t\tif (httppost != null) &#123;</span><br><span class=\"line\">\t\t\t\thttppost.releaseConnection();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tif (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\tlogger.debug(&quot;execute:&#123;&#125;,used time:&#123;&#125;ms &quot; ,url,(System.currentTimeMillis() - startTime));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn null;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; 300; i++) &#123;</span><br><span class=\"line\">\t\t\tThread thread = new Thread(new Runnable() &#123;</span><br><span class=\"line\">\t\t\t\t@Override</span><br><span class=\"line\">\t\t\t\tpublic void run() &#123;</span><br><span class=\"line\">\t\t\t\t\twhile (true)&#123;</span><br><span class=\"line\">\t\t\t\t\t\tString s = HttpClientUtils.doGet(&quot;http://localhost:3001/hello&quot;, new HashMap&lt;&gt;());</span><br><span class=\"line\">\t\t\t\t\t\tSystem.out.println(s+new Date());</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t\t\tthread.setName(&quot;requestThread&quot;+i);</span><br><span class=\"line\">\t\t\tthread.start();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>线程统计</p>\n<img src=\"/2023/08/31/%E6%B1%A0%E5%8C%96%E6%8A%80%E6%9C%AF%E5%AF%BC%E8%87%B4cpu%E5%8D%A0%E7%94%A8%E9%A3%99%E9%AB%98%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/08/31/%E6%B1%A0%E5%8C%96%E6%8A%80%E6%9C%AF%E5%AF%BC%E8%87%B4cpu%E5%8D%A0%E7%94%A8%E9%A3%99%E9%AB%98%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/%E7%BA%BF%E7%A8%8B%E7%BB%9F%E8%AE%A1.jpg\" class title=\"线程统计\">\n\n<p>修改连接池配置 <em>defaultMaxConnection</em> 为 200 和 <em>cm</em>.setMaxTotal(200);</p>\n<p>再重新测试观察如下图</p>\n<img src=\"/2023/08/31/%E6%B1%A0%E5%8C%96%E6%8A%80%E6%9C%AF%E5%AF%BC%E8%87%B4cpu%E5%8D%A0%E7%94%A8%E9%A3%99%E9%AB%98%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/08/31/%E6%B1%A0%E5%8C%96%E6%8A%80%E6%9C%AF%E5%AF%BC%E8%87%B4cpu%E5%8D%A0%E7%94%A8%E9%A3%99%E9%AB%98%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/%E7%BA%BF%E7%A8%8B%E7%BB%9F%E8%AE%A12.jpg\" class title=\"线程统计2\">\n\n<p>由此可以得出结论，合理配置httpclient连接数很重要。</p>\n<p>最后分析一下，在本次排查问题中学到的一些知识，由于本次的线程都是有spring rabbitmq的消费监听创建的，其实这些消费线程是使用线程池处理的，这些线程池已经做了自动缩容，扩容处理，一般不建议另外新旧线程消费处理。具体代码可以去看SimpleMessageListenerContainer类的considerStoppingAConsumer方法和adjustConsumers方法。</p>\n<h1 id=\"另外分析一个线程在线分析网站\"><a href=\"#另外分析一个线程在线分析网站\" class=\"headerlink\" title=\"另外分析一个线程在线分析网站\"></a>另外分析一个线程在线分析网站</h1><p> <a href=\"https://fastthread.io/\">java线程分析网站</a></p>\n<img src=\"/2023/08/31/%E6%B1%A0%E5%8C%96%E6%8A%80%E6%9C%AF%E5%AF%BC%E8%87%B4cpu%E5%8D%A0%E7%94%A8%E9%A3%99%E9%AB%98%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/08/31/%E6%B1%A0%E5%8C%96%E6%8A%80%E6%9C%AF%E5%AF%BC%E8%87%B4cpu%E5%8D%A0%E7%94%A8%E9%A3%99%E9%AB%98%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/%E7%BA%BF%E7%A8%8B%E5%88%86%E6%9E%901.jpg\" class title=\"线程分析1\">\n\n<img src=\"/2023/08/31/%E6%B1%A0%E5%8C%96%E6%8A%80%E6%9C%AF%E5%AF%BC%E8%87%B4cpu%E5%8D%A0%E7%94%A8%E9%A3%99%E9%AB%98%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/08/31/%E6%B1%A0%E5%8C%96%E6%8A%80%E6%9C%AF%E5%AF%BC%E8%87%B4cpu%E5%8D%A0%E7%94%A8%E9%A3%99%E9%AB%98%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/%E7%BA%BF%E7%A8%8B%E5%88%86%E6%9E%902.jpg\" class title=\"线程分析2\">\n"},{"title":"遍历redis删除生产key","date":"2023-07-03T01:54:40.000Z","_content":"\n\n\n某天运维说，你的系统redis存在大量的key不设置过期时间，而且key是乱码的（其实是jdk序列化的key）。\n\n我让运维备份出来，连上去，使用scan 0 match * count 10000，查看发现大量的key是:b'\\xac\\xed\\x00\\x05t\\x00\\x1a'开头的，以下是删除脚本\n\n\n\n```python\nimport redis\n\n# Redis \nredis_host = 'xxx.xxx.xxxx'\nredis_port = 6379\nredis_db = 2\n\n# 分别扫描这三种模式的key删除\nkey_pattern = \"hello*\" \n\n\n\nr = redis.Redis(host=redis_host, port=redis_port, db=redis_db)\n\nbatch_size = 100\ncursor = 0\nct = 0\n\nwhile True:\n\n    cursor, keys = r.scan(cursor=cursor, match=key_pattern, count=batch_size)\n\n    for key in keys:\n    \tr.delete(key)\n    \tct = ct+1\n    if cursor == 0:\n        break\nprint(ct)\nprint('finsh')\n\n```\n\n","source":"_posts/遍历redis删除生产key.md","raw":"---\ntitle: 遍历redis删除生产key\ndate: 2023-07-03 09:54:40\ntags:\n---\n\n\n\n某天运维说，你的系统redis存在大量的key不设置过期时间，而且key是乱码的（其实是jdk序列化的key）。\n\n我让运维备份出来，连上去，使用scan 0 match * count 10000，查看发现大量的key是:b'\\xac\\xed\\x00\\x05t\\x00\\x1a'开头的，以下是删除脚本\n\n\n\n```python\nimport redis\n\n# Redis \nredis_host = 'xxx.xxx.xxxx'\nredis_port = 6379\nredis_db = 2\n\n# 分别扫描这三种模式的key删除\nkey_pattern = \"hello*\" \n\n\n\nr = redis.Redis(host=redis_host, port=redis_port, db=redis_db)\n\nbatch_size = 100\ncursor = 0\nct = 0\n\nwhile True:\n\n    cursor, keys = r.scan(cursor=cursor, match=key_pattern, count=batch_size)\n\n    for key in keys:\n    \tr.delete(key)\n    \tct = ct+1\n    if cursor == 0:\n        break\nprint(ct)\nprint('finsh')\n\n```\n\n","slug":"遍历redis删除生产key","published":1,"updated":"2023-07-03T02:45:15.300Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllywfmph000cbyto3xz3hiih","content":"<p>某天运维说，你的系统redis存在大量的key不设置过期时间，而且key是乱码的（其实是jdk序列化的key）。</p>\n<p>我让运维备份出来，连上去，使用scan 0 match * count 10000，查看发现大量的key是:b’\\xac\\xed\\x00\\x05t\\x00\\x1a’开头的，以下是删除脚本</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> redis</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Redis </span></span><br><span class=\"line\">redis_host = <span class=\"string\">&#x27;xxx.xxx.xxxx&#x27;</span></span><br><span class=\"line\">redis_port = <span class=\"number\">6379</span></span><br><span class=\"line\">redis_db = <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 分别扫描这三种模式的key删除</span></span><br><span class=\"line\">key_pattern = <span class=\"string\">&quot;hello*&quot;</span> </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">r = redis.Redis(host=redis_host, port=redis_port, db=redis_db)</span><br><span class=\"line\"></span><br><span class=\"line\">batch_size = <span class=\"number\">100</span></span><br><span class=\"line\">cursor = <span class=\"number\">0</span></span><br><span class=\"line\">ct = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    cursor, keys = r.scan(cursor=cursor, <span class=\"keyword\">match</span>=key_pattern, count=batch_size)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> keys:</span><br><span class=\"line\">    \tr.delete(key)</span><br><span class=\"line\">    \tct = ct+<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> cursor == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(ct)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;finsh&#x27;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>某天运维说，你的系统redis存在大量的key不设置过期时间，而且key是乱码的（其实是jdk序列化的key）。</p>\n<p>我让运维备份出来，连上去，使用scan 0 match * count 10000，查看发现大量的key是:b’\\xac\\xed\\x00\\x05t\\x00\\x1a’开头的，以下是删除脚本</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> redis</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Redis </span></span><br><span class=\"line\">redis_host = <span class=\"string\">&#x27;xxx.xxx.xxxx&#x27;</span></span><br><span class=\"line\">redis_port = <span class=\"number\">6379</span></span><br><span class=\"line\">redis_db = <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 分别扫描这三种模式的key删除</span></span><br><span class=\"line\">key_pattern = <span class=\"string\">&quot;hello*&quot;</span> </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">r = redis.Redis(host=redis_host, port=redis_port, db=redis_db)</span><br><span class=\"line\"></span><br><span class=\"line\">batch_size = <span class=\"number\">100</span></span><br><span class=\"line\">cursor = <span class=\"number\">0</span></span><br><span class=\"line\">ct = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    cursor, keys = r.scan(cursor=cursor, <span class=\"keyword\">match</span>=key_pattern, count=batch_size)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> keys:</span><br><span class=\"line\">    \tr.delete(key)</span><br><span class=\"line\">    \tct = ct+<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> cursor == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(ct)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;finsh&#x27;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n"}],"PostAsset":[{"_id":"source/_posts/BeanFactoryPostProcessor后置处理器分析/5.jpg","post":"cllywfmp90000bytogz0bend6","slug":"5.jpg","modified":1,"renderable":1},{"_id":"source/_posts/BeanFactoryPostProcessor后置处理器分析/6.jpg","post":"cllywfmp90000bytogz0bend6","slug":"6.jpg","modified":1,"renderable":1},{"_id":"source/_posts/FactoryBean一探究竟-md/1.jpg","post":"cllywfmpc0001byto6mi2azir","slug":"1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/FactoryBean一探究竟-md/1677828665083.jpg","post":"cllywfmpc0001byto6mi2azir","slug":"1677828665083.jpg","modified":1,"renderable":1},{"_id":"source/_posts/FactoryBean一探究竟-md/1677834219275.jpg","post":"cllywfmpc0001byto6mi2azir","slug":"1677834219275.jpg","modified":1,"renderable":1},{"_id":"source/_posts/FactoryBean一探究竟-md/2.jpg","post":"cllywfmpc0001byto6mi2azir","slug":"2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/FactoryBean一探究竟-md/3.png","post":"cllywfmpc0001byto6mi2azir","slug":"3.png","modified":1,"renderable":1},{"_id":"source/_posts/FactoryBean一探究竟-md/4.png","post":"cllywfmpc0001byto6mi2azir","slug":"4.png","modified":1,"renderable":1},{"_id":"source/_posts/池化技术导致cpu占用飙高问题分析/状态同步服务模块线程日志.log","post":"cllywfmph000abyto13jp0kb9","slug":"状态同步服务模块线程日志.log","modified":1,"renderable":1},{"_id":"source/_posts/池化技术导致cpu占用飙高问题分析/线程分析1.jpg","post":"cllywfmph000abyto13jp0kb9","slug":"线程分析1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/池化技术导致cpu占用飙高问题分析/线程分析2.jpg","post":"cllywfmph000abyto13jp0kb9","slug":"线程分析2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/池化技术导致cpu占用飙高问题分析/线程占用情况.png","post":"cllywfmph000abyto13jp0kb9","slug":"线程占用情况.png","modified":1,"renderable":1},{"_id":"source/_posts/池化技术导致cpu占用飙高问题分析/线程统计.jpg","post":"cllywfmph000abyto13jp0kb9","slug":"线程统计.jpg","modified":1,"renderable":1},{"_id":"source/_posts/池化技术导致cpu占用飙高问题分析/线程统计2.jpg","post":"cllywfmph000abyto13jp0kb9","slug":"线程统计2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/池化技术导致cpu占用飙高问题分析/阻塞.jpg","post":"cllywfmph000abyto13jp0kb9","slug":"阻塞.jpg","modified":1,"renderable":1}],"PostCategory":[],"PostTag":[{"post_id":"cllywfmpc0001byto6mi2azir","tag_id":"cllywfmpe0003byto32g51rxd","_id":"cllywfmpf0006byto5vf178td"},{"post_id":"cllywfmpd0002byto7qnp1l3y","tag_id":"cllywfmpf0005bytodbzg8ako","_id":"cllywfmpf0007byto3k6kfvnf"},{"post_id":"cllywfmpg0009bytoeoa74arz","tag_id":"cllywfmpe0003byto32g51rxd","_id":"cllywfmph000bbytodge8dbss"}],"Tag":[{"name":"spring","_id":"cllywfmpe0003byto32g51rxd"},{"name":"前端","_id":"cllywfmpf0005bytodbzg8ako"}]}}